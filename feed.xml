<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://sangeet2020.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sangeet2020.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-22T22:40:03+02:00</updated><id>https://sangeet2020.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">My Shell Configuration Files</title><link href="https://sangeet2020.github.io/blog/2025/mybashrc/" rel="alternate" type="text/html" title="My Shell Configuration Files"/><published>2025-01-14T17:40:16+01:00</published><updated>2025-01-14T17:40:16+01:00</updated><id>https://sangeet2020.github.io/blog/2025/mybashrc</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2025/mybashrc/"><![CDATA[<h1 id="my-shell-configuration-files">My Shell Configuration Files</h1> <p>Welcome to my collection of shell configuration files! These configurations have been fine-tuned over years of daily use to boost productivity and make terminal work more enjoyable. Each file serves a specific purpose in creating a seamless command-line experience.</p> <h2 id="-table-of-contents">📋 Table of Contents</h2> <ul> <li><a href="#bashrc">.bashrc</a></li> <li><a href="#zshrc">.zshrc</a></li> <li><a href="#custom_functions">.custom_functions</a></li> <li><a href="#fancy-promptsh">.fancy-prompt.sh</a></li> <li><a href="#screenrc">.screenrc</a></li> <li><a href="#zsh_aliases">.zsh_aliases</a></li> <li><a href="#vimrc">.vimrc</a></li> </ul> <hr/> <h2 id="bashrc">.bashrc</h2> <p>The heart of Bash configuration - contains environment variables, PATH modifications, and basic shell settings.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#============================================================#</span>
<span class="c">#                     Part 1: System Settings                #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># ~/.bashrc: executed by bash(1) for non-login shells.</span>

<span class="c"># If not running interactively, don't do anything</span>
<span class="k">case</span> <span class="nv">$-</span> <span class="k">in</span>
    <span class="k">*</span>i<span class="k">*</span><span class="p">)</span> <span class="p">;;</span>
      <span class="k">*</span><span class="p">)</span> <span class="k">return</span><span class="p">;;</span>
<span class="k">esac</span>

<span class="c"># don't put duplicate lines or lines starting with space in the history.</span>
<span class="nv">HISTCONTROL</span><span class="o">=</span>ignoreboth

<span class="c"># append to the history file, don't overwrite it</span>
<span class="nb">shopt</span> <span class="nt">-s</span> histappend

<span class="c"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span>
<span class="nv">HISTSIZE</span><span class="o">=</span>1000
<span class="nv">HISTFILESIZE</span><span class="o">=</span>2000

<span class="c"># check the window size after each command and, if necessary,</span>
<span class="c"># update the values of LINES and COLUMNS.</span>
<span class="nb">shopt</span> <span class="nt">-s</span> checkwinsize

<span class="c"># make less more friendly for non-text input files</span>
<span class="o">[</span> <span class="nt">-x</span> /usr/bin/lesspipe <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span><span class="nv">SHELL</span><span class="o">=</span>/bin/sh lesspipe<span class="si">)</span><span class="s2">"</span>

<span class="c"># set variable identifying the chroot you work in (used in the prompt below)</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">debian_chroot</span><span class="k">:-}</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="nt">-r</span> /etc/debian_chroot <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">debian_chroot</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> /etc/debian_chroot<span class="si">)</span>
<span class="k">fi

</span><span class="nb">stty </span>erase ^?

<span class="c">#============================================================#</span>
<span class="c">#                  Part 2: Prompt Customization              #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># Set a fancy prompt (non-color, unless we know we "want" color)</span>
<span class="k">case</span> <span class="s2">"</span><span class="nv">$TERM</span><span class="s2">"</span> <span class="k">in
    </span>xterm-color|<span class="k">*</span><span class="nt">-256color</span><span class="p">)</span> <span class="nv">color_prompt</span><span class="o">=</span><span class="nb">yes</span><span class="p">;;</span>
<span class="k">esac</span>

<span class="c"># Uncomment for a colored prompt, if the terminal has the capability</span>
<span class="c"># force_color_prompt=yes</span>

<span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$force_color_prompt</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    if</span> <span class="o">[</span> <span class="nt">-x</span> /usr/bin/tput <span class="o">]</span> <span class="o">&amp;&amp;</span> tput setaf 1 <span class="o">&gt;</span>&amp;/dev/null<span class="p">;</span> <span class="k">then
        </span><span class="nv">color_prompt</span><span class="o">=</span><span class="nb">yes
    </span><span class="k">else
        </span><span class="nv">color_prompt</span><span class="o">=</span>
    <span class="k">fi
fi

if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$color_prompt</span><span class="s2">"</span> <span class="o">=</span> <span class="nb">yes</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">PS1</span><span class="o">=</span><span class="s1">'\[\033[01;33m\][\u@\h\[\033[01;32m\] \W\[\033[01;33m\]]\$\[\033[00m\] '</span>
<span class="k">else
    </span><span class="nv">PS1</span><span class="o">=</span><span class="s1">'${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '</span>
<span class="k">fi
</span><span class="nb">unset </span>color_prompt force_color_prompt

<span class="c"># If this is an xterm, set the title to user@host:dir</span>
<span class="k">case</span> <span class="s2">"</span><span class="nv">$TERM</span><span class="s2">"</span> <span class="k">in
    </span>xterm<span class="k">*</span><span class="p">|</span>rxvt<span class="k">*</span><span class="p">)</span>
        <span class="nv">PS1</span><span class="o">=</span><span class="s2">"</span><span class="se">\[\e</span><span class="s2">]0;</span><span class="k">${</span><span class="nv">debian_chroot</span>:+<span class="p">(</span><span class="nv">$debian_chroot</span><span class="p">)</span><span class="k">}</span><span class="se">\u</span><span class="s2">@</span><span class="se">\h</span><span class="s2">: </span><span class="se">\w\a\]</span><span class="nv">$PS1</span><span class="s2">"</span>
        <span class="p">;;</span>
    <span class="k">*</span><span class="p">)</span>
        <span class="p">;;</span>
<span class="k">esac</span>


<span class="c">#============================================================#</span>
<span class="c">#               Part 3: Color and Alias Definitions          #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># Enable color support for 'ls' and add handy aliases</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-x</span> /usr/bin/dircolors <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">test</span> <span class="nt">-r</span> ~/.dircolors <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dircolors</span> <span class="nt">-b</span> ~/.dircolors<span class="si">)</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dircolors</span> <span class="nt">-b</span><span class="si">)</span><span class="s2">"</span>
    <span class="nb">alias ls</span><span class="o">=</span><span class="s1">'ls --color=auto'</span>
    <span class="nb">alias dir</span><span class="o">=</span><span class="s1">'dir --color=auto'</span>
    <span class="nb">alias vdir</span><span class="o">=</span><span class="s1">'vdir --color=auto'</span>

    <span class="nb">alias grep</span><span class="o">=</span><span class="s1">'grep --color=auto'</span>
    <span class="nb">alias </span><span class="nv">fgrep</span><span class="o">=</span><span class="s1">'fgrep --color=auto'</span>
    <span class="nb">alias </span><span class="nv">egrep</span><span class="o">=</span><span class="s1">'egrep --color=auto'</span>
<span class="k">fi</span>

<span class="c"># Additional 'ls' aliases for convenience</span>
<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">'ls -alF'</span>
<span class="nb">alias </span><span class="nv">la</span><span class="o">=</span><span class="s1">'ls -A'</span>
<span class="nb">alias </span><span class="nv">l</span><span class="o">=</span><span class="s1">'ls -CF'</span>

<span class="c"># Add an "alert" alias for long running commands. Use like so:</span>
<span class="c">#   sleep 10; alert</span>
<span class="nb">alias </span><span class="nv">alert</span><span class="o">=</span><span class="s1">'notify-send --urgency=low -i "$([ $? = 0 ] &amp;&amp; echo terminal || echo error)" "$(history|tail -n1 | sed -e '</span><span class="se">\'</span><span class="s1">'s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//'</span><span class="se">\'</span><span class="s1">')"'</span>

<span class="c"># Check if ~/.bash_aliases exists and source it for additional aliases</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> ~/.bash_aliases <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">.</span> ~/.bash_aliases
<span class="k">fi</span>

<span class="c"># Enable programmable completion features if not already enabled</span>
<span class="k">if</span> <span class="o">!</span> <span class="nb">shopt</span> <span class="nt">-oq</span> posix<span class="p">;</span> <span class="k">then
    if</span> <span class="o">[</span> <span class="nt">-f</span> /usr/share/bash-completion/bash_completion <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">.</span> /usr/share/bash-completion/bash_completion
    <span class="k">elif</span> <span class="o">[</span> <span class="nt">-f</span> /etc/bash_completion <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">.</span> /etc/bash_completion
    <span class="k">fi
fi</span>

<span class="c"># colored GCC warnings and errors</span>
<span class="nb">export </span><span class="nv">GCC_COLORS</span><span class="o">=</span><span class="s1">'error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'</span>


<span class="c">#============================================================#</span>
<span class="c">#                     Part 4: Custom Functions               #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># Function to display terminal color codes</span>
colors<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span>fgc bgc vals seq0
    <span class="nb">printf</span> <span class="s2">"Color escapes are %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s1">'\e[${value};...;${value}m'</span>
    <span class="nb">printf</span> <span class="s2">"Values 30..37 are </span><span class="se">\e</span><span class="s2">[33mforeground colors</span><span class="se">\e</span><span class="s2">[m</span><span class="se">\n</span><span class="s2">"</span>
    <span class="nb">printf</span> <span class="s2">"Values 40..47 are </span><span class="se">\e</span><span class="s2">[43mbackground colors</span><span class="se">\e</span><span class="s2">[m</span><span class="se">\n</span><span class="s2">"</span>
    <span class="nb">printf</span> <span class="s2">"Value  1 gives a  </span><span class="se">\e</span><span class="s2">[1mbold-faced look</span><span class="se">\e</span><span class="s2">[m</span><span class="se">\n\n</span><span class="s2">"</span>

    <span class="k">for </span>fgc <span class="k">in</span> <span class="o">{</span>30..37<span class="o">}</span><span class="p">;</span> <span class="k">do
        for </span>bgc <span class="k">in</span> <span class="o">{</span>40..47<span class="o">}</span><span class="p">;</span> <span class="k">do
            </span><span class="nv">fgc</span><span class="o">=</span><span class="k">${</span><span class="nv">fgc</span><span class="p">#37</span><span class="k">}</span> <span class="c"># white</span>
            <span class="nv">bgc</span><span class="o">=</span><span class="k">${</span><span class="nv">bgc</span><span class="p">#40</span><span class="k">}</span> <span class="c"># black</span>
            <span class="nv">vals</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">fgc</span>:+<span class="nv">$fgc</span><span class="p">;</span><span class="k">}${</span><span class="nv">bgc</span><span class="k">}</span><span class="s2">"</span>
            <span class="nv">vals</span><span class="o">=</span><span class="k">${</span><span class="nv">vals</span><span class="p">%%;</span><span class="k">}</span>
            <span class="nv">seq0</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">vals</span>:+<span class="p">\e[</span><span class="k">${</span><span class="nv">vals</span><span class="k">}</span><span class="nv">m</span><span class="k">}</span><span class="s2">"</span>
            <span class="nb">printf</span> <span class="s2">"  %-9s"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">seq0</span><span class="k">:-</span><span class="p">(default)</span><span class="k">}</span><span class="s2">"</span>
            <span class="nb">printf</span> <span class="s2">" </span><span class="k">${</span><span class="nv">seq0</span><span class="k">}</span><span class="s2">TEXT</span><span class="se">\e</span><span class="s2">[m"</span>
            <span class="nb">printf</span> <span class="s2">" </span><span class="se">\e</span><span class="s2">[</span><span class="k">${</span><span class="nv">vals</span>:+<span class="k">${</span><span class="nv">vals</span><span class="p">+</span><span class="nv">$vals</span><span class="p">;</span><span class="k">}}</span><span class="s2">1mBOLD</span><span class="se">\e</span><span class="s2">[m"</span>
        <span class="k">done
        </span><span class="nb">echo</span><span class="p">;</span> <span class="nb">echo
    </span><span class="k">done</span>
<span class="o">}</span>

<span class="c"># Function to extract various archive types</span>
ex<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        case</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="k">in</span>
            <span class="k">*</span>.tar.bz2<span class="p">)</span> <span class="nb">tar </span>xjvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tar.gz<span class="p">)</span>  <span class="nb">tar </span>xzvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.bz2<span class="p">)</span>     bunzip2 <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.rar<span class="p">)</span>     unrar xv <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.gz<span class="p">)</span>      <span class="nb">gunzip</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tar<span class="p">)</span>     <span class="nb">tar </span>xvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tbz2<span class="p">)</span>    <span class="nb">tar </span>xjvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tgz<span class="p">)</span>     <span class="nb">tar </span>xzvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.zip<span class="p">)</span>     unzip <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.Z<span class="p">)</span>       uncompress <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.7z<span class="p">)</span>      7z x <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span><span class="p">)</span>         <span class="nb">echo</span> <span class="s2">"'</span><span class="nv">$1</span><span class="s2">' cannot be extracted via ex()"</span> <span class="p">;;</span>
        <span class="k">esac</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"'</span><span class="nv">$1</span><span class="s2">' is not a valid file"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Function to log local history in a specific format</span>
myLocalHistory<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-w</span> <span class="nb">.</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">history </span>1 | gawk <span class="s1">'($2 !~ "^[mr]?cd[0-9a-z]?$") {$1="_T="strftime("%Y%m%d_%H:%M:%S_") PROCINFO["ppid"] "\t"; $2=gensub("^_T=[-_0-9:]*[ \t]* *", "", 1, $2); $2=gensub("^_P=[^ \t]* *", "", 1, $2); print;}'</span> <span class="o">&gt;&gt;</span> .history-<span class="nv">$LOGNAME</span>
    <span class="k">else
        </span><span class="nb">history </span>1 | gawk <span class="s1">'($2 !~ "^[mr]?cd[0-9a-z]?$") {$1="_T="strftime("%Y%m%d_%H:%M:%S_") PROCINFO["ppid"] "_PWD="  ENVIRON["PWD"] "\t"; $2=gensub("^_T=[-_0-9:]*[ \t]* *", "", 1, $2); $2=gensub("^_P=[^ \t]* *", "", 1, $2); print;}'</span> <span class="o">&gt;&gt;</span> ~/.history-all-<span class="nv">$LOGNAME</span>
    <span class="k">fi</span>
<span class="o">}</span>
<span class="nb">export </span><span class="nv">PROMPT_COMMAND</span><span class="o">=</span><span class="s2">"myLocalHistory 2&gt; /dev/null"</span>

<span class="c"># Function to search local history</span>
grepLocalHistory<span class="o">()</span> <span class="o">{</span>
    <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> .history-<span class="nv">$LOGNAME</span>
<span class="o">}</span>
<span class="nb">alias </span><span class="nv">h</span><span class="o">=</span>grepLocalHistory

<span class="c"># Function to remove directories gracefully, including empty ones with history files</span>
gracefulRmDir<span class="o">()</span> <span class="o">{</span>
    <span class="k">for </span>d <span class="k">in</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-ge</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span><span class="nb">echo</span> <span class="s2">"Directory not empty: </span><span class="nv">$d</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
            <span class="k">else
                </span><span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span>/.history-<span class="nv">$LOGNAME</span>
                /bin/rmdir <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit </span>1
            <span class="k">fi
        else
            </span><span class="nb">echo</span> <span class="s2">"Not a directory: </span><span class="nv">$d</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
        <span class="k">fi
    done</span>
<span class="o">}</span>
<span class="nb">alias rmdir</span><span class="o">=</span>gracefulRmDir


gzcount<span class="o">()</span> <span class="o">{</span>
    <span class="k">for </span>file <span class="k">in</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        if</span> <span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">: </span><span class="si">$(</span><span class="nb">gzip</span> <span class="nt">-cd</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span><span class="s2">"</span>
        <span class="k">else
            </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2"> is not a valid file"</span>
        <span class="k">fi
    done</span>
<span class="o">}</span>


<span class="c">#============================================================#</span>
<span class="c">#               Part 5: Environment Variables and Paths      #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># Set default language and locale</span>
<span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8
<span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
<span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>en_US.UTF-8

<span class="c"># Set the terminal type to support 256 colors</span>
<span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm-256color

<span class="c"># Custom Library Paths</span>
<span class="c"># export LD_LIBRARY_PATH=/mnt/users/sagarst/bin/miniconda/lib:$LD_LIBRARY_PATH</span>

<span class="c"># Packages installed from source</span>
<span class="c"># export PATH="/mnt/users/sagarst/bin/miniconda/bin:$PATH"  # commented out by conda initialize</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/bin:<span class="nv">$HOME</span>/.local/bin:/usr/local/bin:<span class="nv">$PATH</span>

<span class="c"># Custom Python Path</span>
<span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/mnt/local/sangeet/workncode/k2-fsa/icefall:/mnt/local/sangeet/workncode/k2/k2-fsa/icefall:<span class="nv">$PYTHONPATH</span>

<span class="c"># Path to sherpa executable</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/mnt/local/sangeet/workncode/k2-fsa/sherpa-onnx/build/bin/

<span class="c"># Path to sherpa C API executable (static compilation)</span>
<span class="nb">export </span><span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="s2">"/mnt/local/sangeet/workncode/k2-fsa/sherpa-onnx/build-static:</span><span class="nv">$PKG_CONFIG_PATH</span><span class="s2">"</span>

<span class="c"># CUDA and CUDNN environment variables</span>
<span class="c">#export CUDA_HOME=/usr/local/cuda-11.2</span>
<span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/home/sagarst/bin/cuda/12.4.0
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib:<span class="nv">$LD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/extras/CUPTI/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">CUDAToolkit_ROOT_DIR</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
<span class="nb">export </span><span class="nv">CUDAToolkit_ROOT</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>


<span class="c"># CUDA toolkit paths</span>
<span class="nb">export </span><span class="nv">CUDA_TOOLKIT_ROOT_DIR</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
<span class="nb">export </span><span class="nv">CUDA_TOOLKIT_ROOT</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
<span class="nb">export </span><span class="nv">CUDA_BIN_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
<span class="nb">export </span><span class="nv">CUDA_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
<span class="nb">export </span><span class="nv">CUDA_INC_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/targets/x86_64-linux
<span class="nb">export </span><span class="nv">CUDAToolkit_TARGET_DIR</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/targets/x86_64-linux



<span class="c"># Additional CFLAGS for CUDA</span>
<span class="nb">export </span><span class="nv">CFLAGS</span><span class="o">=</span><span class="nt">-I</span><span class="nv">$CUDA_HOME</span>/targets/x86_64-linux/include:<span class="nv">$CFLAGS</span>

<span class="c"># Set Theano flags for GPU usage</span>
<span class="nb">export </span><span class="nv">THEANO_FLAGS</span><span class="o">=</span><span class="s1">'floatX=float32,device=cuda0,gpuarray.preallocate=1'</span>

<span class="c"># Load SSH directory if ~/.sshcd file exists</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> ~/.sshcd <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">cd</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> ~/.sshcd<span class="si">)</span><span class="s2">"</span>
    <span class="nb">rm</span> ~/.sshcd
<span class="k">fi</span>

<span class="c"># Zero size of core dump (avoid disk quota overfill)</span>
<span class="nb">ulimit</span> <span class="nt">-c</span> 1

<span class="c"># Kaldi root from Volker- Mon Aug 12 03:47:43 PM CEST 2024</span>
<span class="nb">export </span><span class="nv">KALDI_ROOT</span><span class="o">=</span><span class="s2">"/mnt/local/volker/Kaldi/"</span>

<span class="c"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span>
<span class="c"># !! Contents within this block are managed by 'conda init' !!</span>
<span class="nv">__conda_setup</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="s1">'/mnt/users/sagarst/bin/miniconda/bin/conda'</span> <span class="s1">'shell.bash'</span> <span class="s1">'hook'</span> 2&gt; /dev/null<span class="si">)</span><span class="s2">"</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">eval</span> <span class="s2">"</span><span class="nv">$__conda_setup</span><span class="s2">"</span>
<span class="k">else
    if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"/mnt/users/sagarst/bin/miniconda/etc/profile.d/conda.sh"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">.</span> <span class="s2">"/mnt/users/sagarst/bin/miniconda/etc/profile.d/conda.sh"</span>
    <span class="k">else
        </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/mnt/users/sagarst/bin/miniconda/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
    <span class="k">fi
fi
</span><span class="nb">unset </span>__conda_setup
<span class="c"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span>

<span class="c"># Huggingface cache dir</span>
<span class="nb">export </span><span class="nv">HF_HOME</span><span class="o">=</span>/mnt/users/sagarst/.hf_cache

<span class="c">#============================================================#</span>
<span class="c">#          Part 6: Specialized Aliases and Functions         #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># General Aliases</span>
<span class="nb">alias rm</span><span class="o">=</span><span class="s1">'rm -i'</span>  <span class="c"># Prompt before deleting files</span>
<span class="nb">alias </span><span class="nv">more</span><span class="o">=</span><span class="s1">'less'</span> <span class="c"># Use 'less' instead of 'more'</span>
<span class="nb">alias </span><span class="nv">lsn</span><span class="o">=</span><span class="s1">'ls'</span>    <span class="c"># Alias for listing files</span>
<span class="nb">alias </span><span class="nv">lsd</span><span class="o">=</span><span class="s1">'ls -d */'</span> <span class="c"># List only directories</span>

<span class="c"># Directory Navigation Aliases</span>
<span class="nb">alias </span><span class="nv">cds</span><span class="o">=</span><span class="s1">'cd /home/sagarst'</span>
<span class="nb">alias </span><span class="nv">cdn</span><span class="o">=</span><span class="s1">'cd /mnt/users/sagarst'</span>
<span class="nb">alias </span><span class="nv">cdw</span><span class="o">=</span><span class="s1">'cd /mnt/local/sangeet/workncode/'</span>
<span class="nb">alias </span><span class="nv">cdl</span><span class="o">=</span><span class="s1">'cd /mnt/local/sangeet/'</span>
<span class="nb">alias </span><span class="nv">cdr</span><span class="o">=</span><span class="s1">'cd /mnt/amtmpvf2/sangeet'</span>

<span class="c"># Activation of Virtual Environments</span>
<span class="nb">alias </span><span class="nv">sb</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/sb_env/bin/activate'</span>
<span class="nb">alias </span><span class="nv">k2c</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/k2-cpu/bin/activate'</span>
<span class="nb">alias </span><span class="nv">k2g</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/k2-gpu/bin/activate'</span>
<span class="nb">alias </span><span class="nv">nemo</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/nemo/bin/activate'</span>
<span class="nb">alias </span><span class="nv">esp</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/esp/bin/activate'</span>
<span class="nb">alias </span><span class="nv">wenet</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/wenet/bin/activate'</span>

<span class="c"># Shortcut for editing bashrc</span>
<span class="nb">alias </span><span class="nv">bashrc</span><span class="o">=</span><span class="s1">'vim ~/.bashrc'</span>

<span class="c"># Alias for removing specific file types</span>
<span class="nb">alias </span><span class="nv">rmr</span><span class="o">=</span><span class="s1">'rm -rf *.out *.err *.logs'</span>

<span class="c"># Custom Command for Starting GPU</span>
<span class="nb">alias </span><span class="nv">start_int_gpu</span><span class="o">=</span><span class="s1">'/home/sagar/bin/start_int_gpu.sh $1 $2 $3'</span>

<span class="c"># VPN Connection Alias</span>
<span class="nb">alias </span>eml-vpn<span class="o">=</span><span class="s1">'sudo openvpn --verb 3 --config /home/eml-speech/work/vpn/sangeet_sagar@vpn.eml.org.ovpn'</span>

<span class="c"># GPU Management</span>
<span class="nb">alias </span><span class="nv">gpu</span><span class="o">=</span><span class="s1">'export CUDA_VISIBLE_DEVICES=$(nvisel --max-count 1 --min-free-memory 5GiB --max-gpu-utilization 50)'</span>

<span class="c"># Listing Aliases</span>
<span class="nb">alias </span><span class="nv">lsr</span><span class="o">=</span><span class="s1">'eza --icons=always -R'</span>    <span class="c"># Recursive listing</span>
<span class="nb">alias </span><span class="nv">ltr</span><span class="o">=</span><span class="s1">'eza --icons=always  -ltr'</span>  <span class="c"># List sorted by modification time</span>
<span class="nb">alias </span><span class="nv">lls</span><span class="o">=</span><span class="s1">'eza --icons=always -lh'</span> 
<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">'eza --icons=always --sort modified -l'</span>


<span class="c"># Conda environment listing</span>
<span class="nb">alias </span><span class="nv">condalist</span><span class="o">=</span><span class="s2">"conda info -e"</span>

<span class="c"># GPU job submission command</span>
<span class="nb">alias </span><span class="nv">qgpu</span><span class="o">=</span><span class="s2">"srun --pty --mem=16gb -n 1 --gres=gpu:1 /bin/bash"</span>

<span class="c"># Monitoring GPU</span>
<span class="nb">alias </span><span class="nv">nsmi</span><span class="o">=</span><span class="s2">"nvitop"</span> <span class="c"># Advanced GPU monitoring</span>
<span class="nb">alias </span><span class="nv">nvsmi</span><span class="o">=</span><span class="s2">"watch --color -n 1 nvidia-smi"</span> <span class="c"># Regular monitoring with auto-refresh</span>
<span class="nb">alias </span><span class="nv">nsmil</span><span class="o">=</span><span class="s1">'nvidia-smi'</span> <span class="c"># Simple call to nvidia-smi</span>

<span class="c"># SGE job queue status</span>
<span class="nb">alias stat</span><span class="o">=</span><span class="s1">'squeue -u sagar -o "%.6i %9P %15j %.6u %.10T %.10M %.10l %.6D %10R %s %.10g"'</span>

<span class="c"># TTS Command</span>
<span class="nb">alias </span><span class="nv">rekni</span><span class="o">=</span><span class="s1">'espeak -v europe/cs -s 150'</span>


<span class="c">#============================================================#</span>
<span class="c">#                 Part 9: End of the file functions          #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># Initialize LS_COLORS with directory color</span>
<span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s1">'di=1;35:'</span> 

<span class="c"># Set non-executable file types (no chmod)</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.py=0;32:"</span>    <span class="c"># Python files: Green</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.sh=0;34:"</span>    <span class="c"># Shell scripts: Blue</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.md=0;37:"</span>    <span class="c"># Markdown files: White</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.txt=0;37:"</span>   <span class="c"># Text files: White</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.wav=0;33:"</span>   <span class="c"># WAV audio files: Yellow</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.jpg=0;35:"</span>   <span class="c"># JPEG images: Magenta</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.png=0;34:"</span>   <span class="c"># PNG images: Blue</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.pdf=0;31:"</span>   <span class="c"># PDF documents: Red</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.html=0;33:"</span>  <span class="c"># HTML files: Yellow</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.css=0;34:"</span>   <span class="c"># CSS files: Blue</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.js=0;33:"</span>    <span class="c"># JavaScript files: Yellow</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.json=0;36:"</span>  <span class="c"># JSON files: Cyan</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.xml=0;32:"</span>   <span class="c"># XML files: Green</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.zip=0;31:"</span>   <span class="c"># ZIP archives: Red</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.tar=0;31:"</span>   <span class="c"># TAR archives: Red</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.gz=0;31:"</span>    <span class="c"># GZ compressed files: Red</span>

<span class="c"># Set executable file types (chmod a+x)</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.py=1;32:"</span>    <span class="c"># Executable Python files: Bold Green</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.sh=1;34:"</span>    <span class="c"># Executable Shell scripts: Bold Blue</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.exe=1;31:"</span>   <span class="c"># Executable files: Bold Red</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.bat=1;33:"</span>   <span class="c"># Batch files: Bold Yellow</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.bin=1;31:"</span>   <span class="c"># Binary files: Bold Red</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.pl=1;35:"</span>    <span class="c"># Perl scripts: Bold Magenta</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.out=1;34:"</span>   <span class="c"># Executable output files: Bold Blue</span>
<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="nv">$LS_COLORS</span>:<span class="s2">"*.run=1;33:"</span>   <span class="c"># Linux run files: Bold Yellow</span>

<span class="c"># Apply the LS_COLORS configuration</span>
<span class="nb">export </span>LS_COLORS

<span class="c"># Fancy Linux Prompt</span>
<span class="nb">source</span> ~/.fancy-prompt.sh
<span class="nb">.</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.cargo/env"</span>

<span class="c"># Startship cross-shell prompt theme</span>
<span class="c"># eval "$(starship init bash)"</span>

</code></pre></div></div> <hr/> <h2 id="zshrc">.zshrc</h2> <p>Main Zsh configuration file with Oh My Zsh setup, plugins, and Zsh-specific settings.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.</span>
<span class="c"># Initialization code that may require console input (password prompts, [y/n]</span>
<span class="c"># confirmations, etc.) must go above this block; everything else may go below.</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-r</span> <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CACHE_HOME</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.cache</span><span class="k">}</span><span class="s2">/p10k-instant-prompt-</span><span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%n</span><span class="k">}</span><span class="s2">.zsh"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">source</span> <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CACHE_HOME</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.cache</span><span class="k">}</span><span class="s2">/p10k-instant-prompt-</span><span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%n</span><span class="k">}</span><span class="s2">.zsh"</span>
<span class="k">fi</span>

<span class="c"># packages installed from source</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/bin:<span class="nv">$HOME</span>/.local/bin:/usr/local/bin:<span class="nv">$PATH</span>

<span class="c"># Path to your Oh My Zsh installation.</span>
<span class="nb">export </span><span class="nv">ZSH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.oh-my-zsh"</span>

<span class="c"># Set name of the theme to load --- if set to "random", it will</span>
<span class="c"># load a random theme each time Oh My Zsh is loaded, in which case,</span>
<span class="c"># to know which specific one was loaded, run: echo $RANDOM_THEME</span>
<span class="c"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span>
<span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"robbyrussell"</span>

<span class="c"># Set list of themes to pick from when loading at random</span>
<span class="c"># Setting this variable when ZSH_THEME=random will cause zsh to load</span>
<span class="c"># a theme from this variable instead of looking in $ZSH/themes/</span>
<span class="c"># If set to an empty array, this variable will have no effect.</span>
<span class="c"># ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )</span>

<span class="c"># Uncomment the following line to use case-sensitive completion.</span>
<span class="c"># CASE_SENSITIVE="true"</span>

<span class="c"># Uncomment the following line to use hyphen-insensitive completion.</span>
<span class="c"># Case-sensitive completion must be off. _ and - will be interchangeable.</span>
<span class="c"># HYPHEN_INSENSITIVE="true"</span>

<span class="c"># Uncomment one of the following lines to change the auto-update behavior</span>
<span class="c"># zstyle ':omz:update' mode disabled  # disable automatic updates</span>
<span class="c"># zstyle ':omz:update' mode auto      # update automatically without asking</span>
<span class="c"># zstyle ':omz:update' mode reminder  # just remind me to update when it's time</span>

<span class="c"># Uncomment the following line to change how often to auto-update (in days).</span>
<span class="c"># zstyle ':omz:update' frequency 13</span>

<span class="c"># Uncomment the following line if pasting URLs and other text is messed up.</span>
<span class="c"># DISABLE_MAGIC_FUNCTIONS="true"</span>

<span class="c"># Uncomment the following line to disable colors in ls.</span>
<span class="c"># DISABLE_LS_COLORS="true"</span>

<span class="c"># Uncomment the following line to disable auto-setting terminal title.</span>
<span class="c"># DISABLE_AUTO_TITLE="true"</span>

<span class="c"># Uncomment the following line to enable command auto-correction.</span>
<span class="c"># ENABLE_CORRECTION="true"</span>

<span class="c"># Uncomment the following line to display red dots whilst waiting for completion.</span>
<span class="c"># You can also set it to another string to have that shown instead of the default red dots.</span>
<span class="c"># e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"</span>
<span class="c"># Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)</span>
<span class="c"># COMPLETION_WAITING_DOTS="true"</span>

<span class="c"># Uncomment the following line if you want to disable marking untracked files</span>
<span class="c"># under VCS as dirty. This makes repository status check for large repositories</span>
<span class="c"># much, much faster.</span>
<span class="c"># DISABLE_UNTRACKED_FILES_DIRTY="true"</span>

<span class="c"># Uncomment the following line if you want to change the command execution time</span>
<span class="c"># stamp shown in the history command output.</span>
<span class="c"># You can set one of the optional three formats:</span>
<span class="c"># "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"</span>
<span class="c"># or set a custom format using the strftime function format specifications,</span>
<span class="c"># see 'man strftime' for details.</span>
<span class="c"># HIST_STAMPS="mm/dd/yyyy"</span>

<span class="c"># Would you like to use another custom folder than $ZSH/custom?</span>
<span class="c"># ZSH_CUSTOM=/path/to/new-custom-folder</span>

<span class="c"># Which plugins would you like to load?</span>
<span class="c"># Standard plugins can be found in $ZSH/plugins/</span>
<span class="c"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span>
<span class="c"># Example format: plugins=(rails git textmate ruby lighthouse)</span>
<span class="c"># Add wisely, as too many plugins slow down shell startup.</span>
<span class="nv">plugins</span><span class="o">=(</span>git<span class="o">)</span>

<span class="nb">source</span> <span class="nv">$ZSH</span>/oh-my-zsh.sh

<span class="c"># User configuration</span>

<span class="c"># export MANPATH="/usr/local/man:$MANPATH"</span>

<span class="c"># You may need to manually set your language environment</span>
<span class="c"># export LANG=en_US.UTF-8</span>

<span class="c"># Preferred editor for local and remote sessions</span>
<span class="c"># if [[ -n $SSH_CONNECTION ]]; then</span>
<span class="c">#   export EDITOR='vim'</span>
<span class="c"># else</span>
<span class="c">#   export EDITOR='mvim'</span>
<span class="c"># fi</span>

<span class="c"># Compilation flags</span>
<span class="c"># export ARCHFLAGS="-arch x86_64"</span>

<span class="c"># Set personal aliases, overriding those provided by Oh My Zsh libs,</span>
<span class="c"># plugins, and themes. Aliases can be placed here, though Oh My Zsh</span>
<span class="c"># users are encouraged to define aliases within a top-level file in</span>
<span class="c"># the $ZSH_CUSTOM folder, with .zsh extension. Examples:</span>
<span class="c"># - $ZSH_CUSTOM/aliases.zsh</span>
<span class="c"># - $ZSH_CUSTOM/macos.zsh</span>
<span class="c"># For a full list of active aliases, run `alias`.</span>
<span class="c">#</span>
<span class="c"># Example aliases</span>
<span class="c"># alias zshconfig="mate ~/.zshrc"</span>
<span class="c"># alias ohmyzsh="mate ~/.oh-my-zsh"</span>
<span class="nb">source</span> /home/sagarst/bin/main/powerlevel10k/powerlevel10k.zsh-theme

<span class="c"># history setup</span>
<span class="nv">HISTFILE</span><span class="o">=</span><span class="nv">$HOME</span>/.zhistory.<span class="si">$(</span><span class="nb">tty</span> | <span class="nb">sed</span> <span class="s1">'s/[^a-zA-Z0-9]/_/g'</span><span class="si">)</span>
<span class="nv">SAVEHIST</span><span class="o">=</span>1000
<span class="nv">HISTSIZE</span><span class="o">=</span>999
setopt share_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_verify

<span class="c"># completion using arrow keys (based on history)</span>
bindkey <span class="s1">'^[[A'</span> history-search-backward
bindkey <span class="s1">'^[[B'</span> history-search-forward

  <span class="c"># Enable word navigation with Ctrl + Left/Right arrow keys in Zsh</span>
bindkey <span class="s1">'^[[1;5C'</span> forward-word   <span class="c"># Ctrl + Right arrow</span>
bindkey <span class="s1">'^[[1;5D'</span> backward-word  <span class="c"># Ctrl + Left arrow</span>

bindkey  <span class="s2">"^[[H"</span>   beginning-of-line
bindkey  <span class="s2">"^[[F"</span>   end-of-line
bindkey  <span class="s2">"^[[3~"</span>  delete-char
bindkey  <span class="s2">"^[[1~"</span>  beginning-of-line  <span class="c"># Additional binding for screen</span>
bindkey  <span class="s2">"^[[4~"</span>  end-of-line  <span class="c"># Additional binding for screen</span>

<span class="nv">WORDCHARS</span><span class="o">=</span><span class="s1">'*?[]~#%^(){}&lt;&gt;|&amp;'</span>

<span class="nb">source</span> /home/sagarst/bin/zsh-autosuggestions/zsh-autosuggestions.zsh
<span class="nb">source</span> /home/sagarst/bin/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

<span class="c"># To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.</span>
<span class="o">[[</span> <span class="o">!</span> <span class="nt">-f</span> ~/.p10k.zsh <span class="o">]]</span> <span class="o">||</span> <span class="nb">source</span> ~/.p10k.zsh

<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="s2">"/home/sagarst/bin"</span> <span class="c"># Add custom bin directory to PATH</span>

<span class="c"># ---- Eza (better ls) -----</span>

<span class="nb">alias ls</span><span class="o">=</span><span class="s2">"/home/sagarst/bin/eza --icons=always"</span>

<span class="c"># ---- Zoxide (better cd) ----</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>/home/sagarst/bin/zoxide init zsh<span class="si">)</span><span class="s2">"</span>

<span class="nb">alias cd</span><span class="o">=</span><span class="s2">"z"</span>

<span class="c"># Directory Navigation Aliases</span>
<span class="nb">alias </span><span class="nv">cds</span><span class="o">=</span><span class="s1">'cd /home/sagarst'</span>
<span class="nb">alias </span><span class="nv">cdn</span><span class="o">=</span><span class="s1">'cd /mnt/users/sagarst'</span>
<span class="nb">alias </span><span class="nv">cdw</span><span class="o">=</span><span class="s1">'cd /mnt/local/sangeet/workncode/'</span>
<span class="nb">alias </span><span class="nv">cdl</span><span class="o">=</span><span class="s1">'cd /mnt/local/sangeet/'</span>
<span class="nb">alias </span><span class="nv">cdr</span><span class="o">=</span><span class="s1">'cd /mnt/amtmpvf2/sangeet'</span>

<span class="c"># All aliases</span>
<span class="nb">source</span> ~/.zsh_aliases


<span class="c">#============================================================#</span>
<span class="c">#                     Custom Functions                       #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># Function to log local history in a specific format</span>
myLocalHistory<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-w</span> <span class="nb">.</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">fc</span> <span class="nt">-l</span> <span class="nt">-1</span> | gawk <span class="s1">'($2 !~ "^[mr]?cd[0-9a-z]?$") {$1="_T="strftime("%Y%m%d_%H:%M:%S_") PROCINFO["ppid"] "\t"; $2=gensub("^_T=[-_0-9:]*[ \t]* *", "", 1, $2); $2=gensub("^_P=[^ \t]* *", "", 1, $2); print;}'</span> <span class="o">&gt;&gt;</span> .history-<span class="nv">$LOGNAME</span>
    <span class="k">else
        </span><span class="nb">fc</span> <span class="nt">-l</span> <span class="nt">-1</span> | gawk <span class="s1">'($2 !~ "^[mr]?cd[0-9a-z]?$") {$1="_T="strftime("%Y%m%d_%H:%M:%S_") PROCINFO["ppid"] "_PWD="  ENVIRON["PWD"] "\t"; $2=gensub("^_T=[-_0-9:]*[ \t]* *", "", 1, $2); $2=gensub("^_P=[^ \t]* *", "", 1, $2); print;}'</span> <span class="o">&gt;&gt;</span> ~/.history-all-<span class="nv">$LOGNAME</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># export PROMPT_COMMAND="myLocalHistory 2&gt; /dev/null"</span>

precmd<span class="o">()</span> <span class="o">{</span>
    myLocalHistory 2&gt;/dev/null
<span class="o">}</span>

<span class="c"># Function to search local history</span>
grepLocalHistory<span class="o">()</span> <span class="o">{</span>
    <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> .history-<span class="nv">$LOGNAME</span>
<span class="o">}</span>
<span class="nb">alias </span><span class="nv">h</span><span class="o">=</span>grepLocalHistory


</code></pre></div></div> <hr/> <h2 id="custom_functions">.custom_functions</h2> <p>Collection of custom shell functions that automate repetitive tasks and enhance workflow efficiency.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Function to display terminal color codes</span>
colors<span class="o">()</span> <span class="o">{</span>
    <span class="nb">local </span>fgc bgc vals seq0
    <span class="nb">printf</span> <span class="s2">"Color escapes are %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s1">'\e[${value};...;${value}m'</span>
    <span class="nb">printf</span> <span class="s2">"Values 30..37 are </span><span class="se">\e</span><span class="s2">[33mforeground colors</span><span class="se">\e</span><span class="s2">[m</span><span class="se">\n</span><span class="s2">"</span>
    <span class="nb">printf</span> <span class="s2">"Values 40..47 are </span><span class="se">\e</span><span class="s2">[43mbackground colors</span><span class="se">\e</span><span class="s2">[m</span><span class="se">\n</span><span class="s2">"</span>
    <span class="nb">printf</span> <span class="s2">"Value  1 gives a  </span><span class="se">\e</span><span class="s2">[1mbold-faced look</span><span class="se">\e</span><span class="s2">[m</span><span class="se">\n\n</span><span class="s2">"</span>

    <span class="k">for </span>fgc <span class="k">in</span> <span class="o">{</span>30..37<span class="o">}</span><span class="p">;</span> <span class="k">do
        for </span>bgc <span class="k">in</span> <span class="o">{</span>40..47<span class="o">}</span><span class="p">;</span> <span class="k">do
            </span><span class="nv">fgc</span><span class="o">=</span><span class="k">${</span><span class="nv">fgc</span><span class="p">#37</span><span class="k">}</span> <span class="c"># white</span>
            <span class="nv">bgc</span><span class="o">=</span><span class="k">${</span><span class="nv">bgc</span><span class="p">#40</span><span class="k">}</span> <span class="c"># black</span>
            <span class="nv">vals</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">fgc</span>:+<span class="nv">$fgc</span><span class="p">;</span><span class="k">}${</span><span class="nv">bgc</span><span class="k">}</span><span class="s2">"</span>
            <span class="nv">vals</span><span class="o">=</span><span class="k">${</span><span class="nv">vals</span><span class="p">%%;</span><span class="k">}</span>
            <span class="nv">seq0</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">vals</span>:+<span class="p">\e[</span><span class="k">${</span><span class="nv">vals</span><span class="k">}</span><span class="nv">m</span><span class="k">}</span><span class="s2">"</span>
            <span class="nb">printf</span> <span class="s2">"  %-9s"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">seq0</span><span class="k">:-</span><span class="p">(default)</span><span class="k">}</span><span class="s2">"</span>
            <span class="nb">printf</span> <span class="s2">" </span><span class="k">${</span><span class="nv">seq0</span><span class="k">}</span><span class="s2">TEXT</span><span class="se">\e</span><span class="s2">[m"</span>
            <span class="nb">printf</span> <span class="s2">" </span><span class="se">\e</span><span class="s2">[</span><span class="k">${</span><span class="nv">vals</span>:+<span class="k">${</span><span class="nv">vals</span><span class="p">+</span><span class="nv">$vals</span><span class="p">;</span><span class="k">}}</span><span class="s2">1mBOLD</span><span class="se">\e</span><span class="s2">[m"</span>
        <span class="k">done
        </span><span class="nb">echo</span><span class="p">;</span> <span class="nb">echo
    </span><span class="k">done</span>
<span class="o">}</span>

<span class="c"># Function to extract various archive types</span>
ex<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        case</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="k">in</span>
            <span class="k">*</span>.tar.bz2<span class="p">)</span> <span class="nb">tar </span>xjvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tar.gz<span class="p">)</span>  <span class="nb">tar </span>xzvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.bz2<span class="p">)</span>     bunzip2 <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.rar<span class="p">)</span>     unrar xv <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.gz<span class="p">)</span>      <span class="nb">gunzip</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tar<span class="p">)</span>     <span class="nb">tar </span>xvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tbz2<span class="p">)</span>    <span class="nb">tar </span>xjvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.tgz<span class="p">)</span>     <span class="nb">tar </span>xzvf <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.zip<span class="p">)</span>     unzip <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.Z<span class="p">)</span>       uncompress <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span>.7z<span class="p">)</span>      7z x <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="p">;;</span>
            <span class="k">*</span><span class="p">)</span>         <span class="nb">echo</span> <span class="s2">"'</span><span class="nv">$1</span><span class="s2">' cannot be extracted via ex()"</span> <span class="p">;;</span>
        <span class="k">esac</span>
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"'</span><span class="nv">$1</span><span class="s2">' is not a valid file"</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="c"># Function to log local history in a specific format</span>
myLocalHistory<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nt">-w</span> <span class="nb">.</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">history </span>1 | gawk <span class="s1">'($2 !~ "^[mr]?cd[0-9a-z]?$") {$1="_T="strftime("%Y%m%d_%H:%M:%S_") PROCINFO["ppid"] "\t"; $2=gensub("^_T=[-_0-9:]*[ \t]* *", "", 1, $2); $2=gensub("^_P=[^ \t]* *", "", 1, $2); print;}'</span> <span class="o">&gt;&gt;</span> .history-<span class="nv">$LOGNAME</span>
    <span class="k">else
        </span><span class="nb">history </span>1 | gawk <span class="s1">'($2 !~ "^[mr]?cd[0-9a-z]?$") {$1="_T="strftime("%Y%m%d_%H:%M:%S_") PROCINFO["ppid"] "_PWD="  ENVIRON["PWD"] "\t"; $2=gensub("^_T=[-_0-9:]*[ \t]* *", "", 1, $2); $2=gensub("^_P=[^ \t]* *", "", 1, $2); print;}'</span> <span class="o">&gt;&gt;</span> ~/.history-all-<span class="nv">$LOGNAME</span>
    <span class="k">fi</span>
<span class="o">}</span>
<span class="nb">export </span><span class="nv">PROMPT_COMMAND</span><span class="o">=</span><span class="s2">"myLocalHistory 2&gt; /dev/null"</span>

<span class="c"># Function to search local history</span>
grepLocalHistory<span class="o">()</span> <span class="o">{</span>
    <span class="nb">grep</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> .history-<span class="nv">$LOGNAME</span>
<span class="o">}</span>
<span class="nb">alias </span><span class="nv">h</span><span class="o">=</span>grepLocalHistory

<span class="c"># Function to remove directories gracefully, including empty ones with history files</span>
gracefulRmDir<span class="o">()</span> <span class="o">{</span>
    <span class="k">for </span>d <span class="k">in</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
        if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            if</span> <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span> | <span class="nb">wc</span> <span class="nt">-l</span><span class="si">)</span><span class="s2">"</span> <span class="nt">-ge</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then
                </span><span class="nb">echo</span> <span class="s2">"Directory not empty: </span><span class="nv">$d</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
            <span class="k">else
                </span><span class="nb">rm</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span>/.history-<span class="nv">$LOGNAME</span>
                /bin/rmdir <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit </span>1
            <span class="k">fi
        else
            </span><span class="nb">echo</span> <span class="s2">"Not a directory: </span><span class="nv">$d</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
        <span class="k">fi
    done</span>
<span class="o">}</span>
<span class="nb">alias rmdir</span><span class="o">=</span>gracefulRmDir

</code></pre></div></div> <hr/> <h2 id="fancy-promptsh">.fancy-prompt.sh</h2> <p>Custom prompt configuration script that creates an informative and visually appealing command prompt.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

__powerline<span class="o">()</span> <span class="o">{</span>
    <span class="c"># Unicode symbols</span>
    <span class="nb">readonly </span><span class="nv">GIT_BRANCH_CHANGED_SYMBOL</span><span class="o">=</span><span class="s1">'+'</span>
    <span class="nb">readonly </span><span class="nv">GIT_NEED_PULL_SYMBOL</span><span class="o">=</span><span class="s1">'⇣'</span>
    <span class="nb">readonly </span><span class="nv">GIT_NEED_PUSH_SYMBOL</span><span class="o">=</span><span class="s1">'⇡'</span>
    <span class="nb">readonly </span><span class="nv">PS_SYMBOL</span><span class="o">=</span><span class="s1">'🍻'</span>

    <span class="c"># Solarized colorscheme</span>
<span class="nb">readonly </span><span class="nv">BG_BASE00</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 11<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Bright yellow</span>
<span class="nb">readonly </span><span class="nv">BG_BASE01</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 10<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Bright green</span>
<span class="nb">readonly </span><span class="nv">BG_BASE02</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 0<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Black</span>
<span class="nb">readonly </span><span class="nv">BG_BASE03</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 8<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Dark gray</span>
<span class="nb">readonly </span><span class="nv">BG_BASE0</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 12<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Bright blue</span>
<span class="nb">readonly </span><span class="nv">BG_BASE1</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 14<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Bright cyan</span>
<span class="nb">readonly </span><span class="nv">BG_BASE2</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 7<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>     <span class="c"># Background color: White</span>
<span class="nb">readonly </span><span class="nv">BG_BASE3</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 15<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Bright white</span>
<span class="nb">readonly </span><span class="nv">BG_BLUE</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 4<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Blue</span>
<span class="nb">readonly </span><span class="nv">BG_BASE4</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 208<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Bright orange</span>
<span class="nb">readonly </span><span class="nv">BG_BASE5</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 214<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Light orange</span>
<span class="nb">readonly </span><span class="nv">BG_BASE6</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 226<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Bright yellow</span>
<span class="nb">readonly </span><span class="nv">BG_BASE7</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 229<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Light yellow</span>
<span class="nb">readonly </span><span class="nv">BG_BASE8</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 93<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Bright purple</span>
<span class="nb">readonly </span><span class="nv">BG_BASE9</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 99<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Light purple</span>
<span class="nb">readonly </span><span class="nv">BG_BASE10</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 135<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Violet</span>
<span class="nb">readonly </span><span class="nv">BG_BASE11</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 129<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Light violet</span>
<span class="nb">readonly </span><span class="nv">BG_BASE12</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 164<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Bright magenta</span>
<span class="nb">readonly </span><span class="nv">BG_BASE13</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 201<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Light magenta</span>

<span class="nb">readonly </span><span class="nv">BG_COLOR1</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;240m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Gray (xterm-256 color, index 240)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR2</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;238m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Dark gray (xterm-256 color, index 238)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR3</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;238m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Dark gray (xterm-256 color, index 238)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR4</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;31m</span><span class="se">\\</span><span class="s2">]"</span>       <span class="c"># Background color: Dark blue (xterm-256 color, index 31)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR5</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;31m</span><span class="se">\\</span><span class="s2">]"</span>       <span class="c"># Background color: Dark blue (xterm-256 color, index 31)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR6</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;237m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Very dark gray (xterm-256 color, index 237)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR7</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;237m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Very dark gray (xterm-256 color, index 237)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR8</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;161m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Deep pink (xterm-256 color, index 161)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR9</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;161m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Deep pink (xterm-256 color, index 161)</span>

<span class="nb">readonly </span><span class="nv">BG_COLOR10</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;208m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Bright orange (xterm-256 color, index 208)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR11</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;214m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Light orange (xterm-256 color, index 214)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR12</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;226m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Bright yellow (xterm-256 color, index 226)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR13</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;229m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Light yellow (xterm-256 color, index 229)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR14</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;93m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Bright purple (xterm-256 color, index 93)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR15</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;99m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Light purple (xterm-256 color, index 99)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR16</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;135m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Violet (xterm-256 color, index 135)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR17</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;129m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Light violet (xterm-256 color, index 129)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR18</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;164m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Bright magenta (xterm-256 color, index 164)</span>
<span class="nb">readonly </span><span class="nv">BG_COLOR19</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[48;5;201m</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Background color: Light magenta (xterm-256 color, index 201)</span>

<span class="nb">readonly </span><span class="nv">BG_CYAN</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 6<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Background color: Cyan</span>
<span class="nb">readonly </span><span class="nv">BG_GREEN</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 2<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>     <span class="c"># Background color: Green</span>
<span class="nb">readonly </span><span class="nv">BG_MAGENTA</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 5<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Magenta</span>
<span class="nb">readonly </span><span class="nv">BG_ORANGE</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 9<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Bright red/orange</span>
<span class="nb">readonly </span><span class="nv">BG_RED</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 1<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>       <span class="c"># Background color: Red</span>
<span class="nb">readonly </span><span class="nv">BG_VIOLET</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 13<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Background color: Bright magenta/violet</span>
<span class="nb">readonly </span><span class="nv">BG_YELLOW</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setab 3<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Background color: Yellow</span>
<span class="nb">readonly </span><span class="nv">BOLD</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput bold<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>            <span class="c"># Bold text</span>
<span class="nb">readonly </span><span class="nv">BOLD_WHITE</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput bold<span class="si">)</span><span class="se">\$</span><span class="s2">(tput setaf 17)</span><span class="se">\\</span><span class="s2">]"</span>  <span class="c"># Bold and white text</span>

<span class="nb">readonly </span><span class="nv">DIM</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput dim<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>              <span class="c"># Dim text</span>

<span class="nb">readonly </span><span class="nv">FG_BASE00</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 11<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Bright yellow</span>
<span class="nb">readonly </span><span class="nv">FG_BASE01</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 10<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Bright green</span>
<span class="nb">readonly </span><span class="nv">FG_BASE02</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 0<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Black</span>
<span class="nb">readonly </span><span class="nv">FG_BASE03</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 8<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Dark gray</span>
<span class="nb">readonly </span><span class="nv">FG_BASE0</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 12<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Bright blue</span>
<span class="nb">readonly </span><span class="nv">FG_BASE1</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 14<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Bright cyan</span>
<span class="nb">readonly </span><span class="nv">FG_BASE2</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 7<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>     <span class="c"># Foreground color: White</span>
<span class="nb">readonly </span><span class="nv">FG_BASE3</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 15<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Bright white</span>
<span class="nb">readonly </span><span class="nv">FG_BLUE</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 4<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Blue</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR1</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;250m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Light gray (xterm-256 color, index 250)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR2</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;240m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Gray (xterm-256 color, index 240)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR3</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;250m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Light gray (xterm-256 color, index 250)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR4</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;238m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Dark gray (xterm-256 color, index 238)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR6</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;31m</span><span class="se">\\</span><span class="s2">]"</span>       <span class="c"># Foreground color: Dark blue (xterm-256 color, index 31)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR7</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;250m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Light gray (xterm-256 color, index 250)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR8</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;237m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Very dark gray (xterm-256 color, index 237)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR9</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;161m</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Deep pink (xterm-256 color, index 161)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR10</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;208m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Bright orange (xterm-256 color, index 208)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR11</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;214m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Light orange (xterm-256 color, index 214)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR12</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;226m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Bright yellow (xterm-256 color, index 226)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR13</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;229m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Light yellow (xterm-256 color, index 229)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR14</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;93m</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Bright purple (xterm-256 color, index 93)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR15</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;99m</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Light purple (xterm-256 color, index 99)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR16</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;135m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Violet (xterm-256 color, index 135)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR17</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;129m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Light violet (xterm-256 color, index 129)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR18</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;164m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Bright magenta (xterm-256 color, index 164)</span>
<span class="nb">readonly </span><span class="nv">FG_COLOR19</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="se">\\</span><span class="s2">e[38;5;201m</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Light magenta (xterm-256 color, index 201)</span>

<span class="nb">readonly </span><span class="nv">FG_CYAN</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 6<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>      <span class="c"># Foreground color: Cyan</span>
<span class="nb">readonly </span><span class="nv">FG_GREEN</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 2<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>     <span class="c"># Foreground color: Green</span>
<span class="nb">readonly </span><span class="nv">FG_MAGENTA</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 5<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Magenta</span>
<span class="nb">readonly </span><span class="nv">FG_ORANGE</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 9<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Bright red/orange</span>
<span class="nb">readonly </span><span class="nv">FG_RED</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 1<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>       <span class="c"># Foreground color: Red</span>
<span class="nb">readonly </span><span class="nv">FG_VIOLET</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 13<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>   <span class="c"># Foreground color: Bright magenta/violet</span>
<span class="nb">readonly </span><span class="nv">FG_YELLOW</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput setaf 3<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>    <span class="c"># Foreground color: Yellow</span>
<span class="nb">readonly </span><span class="nv">RESET</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput sgr0<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>           <span class="c"># Reset text attributes</span>
<span class="nb">readonly </span><span class="nv">REVERSE</span><span class="o">=</span><span class="s2">"</span><span class="se">\\</span><span class="s2">[</span><span class="si">$(</span>tput rev<span class="si">)</span><span class="se">\\</span><span class="s2">]"</span>          <span class="c"># Reverse video (swap foreground and background)</span>


    __git_info<span class="o">()</span> <span class="o">{</span>
        <span class="c"># no .git directory</span>
    	<span class="o">[</span> <span class="nt">-d</span> .git <span class="o">]</span> <span class="o">||</span> <span class="k">return

        </span><span class="nb">local </span>aheadN
        <span class="nb">local </span>behindN
        <span class="nb">local </span>branch
        <span class="nb">local </span>marks
        <span class="nb">local </span>stats

        <span class="c"># get current branch name or short SHA1 hash for detached head</span>
        <span class="nv">branch</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>git symbolic-ref <span class="nt">--short</span> HEAD 2&gt;/dev/null <span class="o">||</span> git describe <span class="nt">--tags</span> <span class="nt">--always</span> 2&gt;/dev/null<span class="si">)</span><span class="s2">"</span>
        <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$branch</span><span class="s2">"</span> <span class="o">]</span> <span class="o">||</span> <span class="k">return</span>  <span class="c"># git branch not found</span>

        <span class="c"># how many commits local branch is ahead/behind of remote?</span>
        <span class="nv">stats</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>git status <span class="nt">--porcelain</span> <span class="nt">--branch</span> | <span class="nb">grep</span> <span class="s1">'^##'</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s1">'\[.\+\]$'</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">aheadN</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$stats</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s1">'ahead \d\+'</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s1">'\d\+'</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">behindN</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$stats</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s1">'behind \d\+'</span> | <span class="nb">grep</span> <span class="nt">-o</span> <span class="s1">'\d\+'</span><span class="si">)</span><span class="s2">"</span>
        <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$aheadN</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> marks+<span class="o">=</span><span class="s2">" </span><span class="nv">$GIT_NEED_PUSH_SYMBOL$aheadN</span><span class="s2">"</span>
        <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$behindN</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> marks+<span class="o">=</span><span class="s2">" </span><span class="nv">$GIT_NEED_PULL_SYMBOL$behindN</span><span class="s2">"</span>

        <span class="c"># print the git branch segment without a trailing newline</span>
        <span class="c"># branch is modified?</span>
        <span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="si">$(</span>git status <span class="nt">--porcelain</span><span class="si">)</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">printf</span> <span class="s2">"%s"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BG_COLOR8</span><span class="k">}</span><span class="s2"></span><span class="nv">$RESET$BG_COLOR8</span><span class="s2"> </span><span class="nv">$branch$marks</span><span class="s2"> </span><span class="nv">$FG_COLOR9</span><span class="s2">"</span>
        <span class="k">else
            </span><span class="nb">printf</span> <span class="s2">"%s"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BG_BLUE</span><span class="k">}</span><span class="s2"></span><span class="nv">$RESET$BG_BLUE</span><span class="s2"> </span><span class="nv">$branch$marks</span><span class="s2"> </span><span class="nv">$RESET$FG_BLUE</span><span class="s2">"</span>
        <span class="k">fi</span>
    <span class="o">}</span>
    git_toplevel_dir<span class="o">()</span> <span class="o">{</span>
        <span class="k">if </span>git rev-parse <span class="nt">--is-inside-work-tree</span> &amp;&gt;/dev/null<span class="p">;</span> <span class="k">then
            </span><span class="nb">basename</span> <span class="s2">"</span><span class="si">$(</span>git rev-parse <span class="nt">--show-toplevel</span><span class="si">)</span><span class="s2">"</span>
        <span class="k">fi</span>
        <span class="o">}</span>

    virtual_env_name<span class="o">()</span> <span class="o">{</span>
        <span class="c"># Check if VIRTUAL_ENV is set and the shell is interactive</span>
        <span class="k">if</span> <span class="o">[[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$VIRTUAL_ENV</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nv">$-</span> <span class="o">==</span> <span class="k">*</span>i<span class="k">*</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">echo</span> <span class="s2">"(</span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$VIRTUAL_ENV</span><span class="si">)</span><span class="s2">) "</span>
        <span class="k">fi</span>
    <span class="o">}</span>


    ps1<span class="o">()</span> <span class="o">{</span>
        <span class="c"># Check the exit code of the previous command and display different</span>
        <span class="c"># colors in the prompt accordingly.</span>
        <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$?</span><span class="s2">"</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">local </span><span class="nv">BG_EXIT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$BG_GREEN</span><span class="s2">"</span>
            <span class="nb">local </span><span class="nv">FG_EXIT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$FG_GREEN</span><span class="s2">"</span>
        <span class="k">else
            </span><span class="nb">local </span><span class="nv">BG_EXIT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$BG_RED</span><span class="s2">"</span>
            <span class="nb">local </span><span class="nv">FG_EXIT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$FG_RED</span><span class="s2">"</span>
        <span class="k">fi


        </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">"</span><span class="nv">$FG_COLOR5</span><span class="s2">"</span>
        <span class="c"># PS1+="$BOLD_WHITE$BG_COLOR11 \$(virtual_env_name)`date +%r` "</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$BOLD_WHITE$BG_COLOR11</span><span class="s2"> </span><span class="se">\$</span><span class="s2">(virtual_env_name) </span><span class="se">\\</span><span class="s2">u@</span><span class="se">\\</span><span class="s2">h "</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$RESET</span><span class="k">${</span><span class="nv">FG_COLOR11</span><span class="k">}</span><span class="s2">"</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BG_COLOR1</span><span class="k">}</span><span class="s2"></span><span class="nv">$RESET</span><span class="s2">"</span>

        <span class="c"># Add the top-level directory of the Git repository</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$BG_COLOR1</span><span class="s2"> </span><span class="se">\$</span><span class="s2">(git_toplevel_dir) "</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$RESET</span><span class="k">${</span><span class="nv">FG_COLOR2</span><span class="k">}</span><span class="s2">"</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BG_COLOR5</span><span class="k">}</span><span class="s2"></span><span class="nv">$RESET</span><span class="s2">"</span>

        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$BG_COLOR5</span><span class="s2"> </span><span class="se">\\</span><span class="s2">W "</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$RESET</span><span class="k">${</span><span class="nv">FG_COLOR6</span><span class="k">}</span><span class="s2">"</span>

        PS1+<span class="o">=</span><span class="s2">"</span><span class="si">$(</span>__git_info<span class="si">)</span><span class="s2">"</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$BG_EXIT</span><span class="s2"></span><span class="nv">$RESET</span><span class="s2">"</span>
        PS1+<span class="o">=</span><span class="s2">"</span><span class="nv">$BG_EXIT$FG_BASE3</span><span class="s2"> </span><span class="k">${</span><span class="nv">PS_SYMBOL</span><span class="k">}</span><span class="s2"> </span><span class="k">${</span><span class="nv">RESET</span><span class="k">}${</span><span class="nv">FG_EXIT</span><span class="k">}</span><span class="s2"></span><span class="k">${</span><span class="nv">RESET</span><span class="k">}</span><span class="s2"> "</span>
    <span class="o">}</span>

    <span class="nb">export </span><span class="nv">PROMPT_COMMAND</span><span class="o">=</span><span class="s2">"myLocalHistory 2&gt; /dev/null; ps1"</span>
<span class="o">}</span>
<span class="c"># Skip if not interactive shell</span>
<span class="o">[[</span> <span class="nv">$-</span> <span class="o">==</span> <span class="k">*</span>i<span class="k">*</span> <span class="o">]]</span> <span class="o">||</span> <span class="k">return
</span>__powerline
<span class="nb">unset </span>__powerline

</code></pre></div></div> <hr/> <h2 id="screenrc">.screenrc</h2> <p>GNU Screen configuration for managing multiple terminal sessions efficiently.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Turn the status line on</span>
hardstatus on

<span class="c"># Set the status line format (customize as needed)</span>
hardstatus alwayslastline
hardstatus string <span class="s2">"%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %Y-%m-%d %C%a "</span>

termcapinfo xterm<span class="k">*</span> ti@:te@


</code></pre></div></div> <hr/> <h2 id="zsh_aliases">.zsh_aliases</h2> <p>Comprehensive collection of Zsh aliases to speed up common commands and operations.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#============================================================#</span>
<span class="c">#               Part 3: Color and Alias Definitions          #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># Enable color support for 'ls' and add handy aliases</span>
<span class="nb">alias dir</span><span class="o">=</span><span class="s1">'dir --color=auto'</span>
<span class="nb">alias vdir</span><span class="o">=</span><span class="s1">'vdir --color=auto'</span>

<span class="nb">alias grep</span><span class="o">=</span><span class="s1">'grep --color=auto'</span>
<span class="nb">alias </span><span class="nv">fgrep</span><span class="o">=</span><span class="s1">'fgrep --color=auto'</span>
<span class="nb">alias </span><span class="nv">egrep</span><span class="o">=</span><span class="s1">'egrep --color=auto'</span>

<span class="c"># Add an "alert" alias for long running commands. Use like so:</span>
<span class="c">#   sleep 10; alert</span>
<span class="nb">alias </span><span class="nv">alert</span><span class="o">=</span><span class="s1">'notify-send --urgency=low -i "$([ $? = 0 ] &amp;&amp; echo terminal || echo error)" "$(history|tail -n1 | sed -e '</span><span class="se">\'</span><span class="s1">'s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//'</span><span class="se">\'</span><span class="s1">')"'</span>

<span class="c">#============================================================#</span>
<span class="c">#               Part 6: Specialized Aliases and Functions         #</span>
<span class="c">#------------------------------------------------------------#</span>

<span class="c"># General Aliases</span>
<span class="nb">alias rm</span><span class="o">=</span><span class="s1">'rm -i'</span>  <span class="c"># Prompt before deleting files</span>
<span class="nb">alias </span><span class="nv">more</span><span class="o">=</span><span class="s1">'less'</span> <span class="c"># Use 'less' instead of 'more'</span>
<span class="nb">alias </span><span class="nv">lsd</span><span class="o">=</span><span class="s1">'ls -d */'</span> <span class="c"># List only directories</span>

<span class="c"># Activation of Virtual Environments</span>
<span class="nb">alias </span><span class="nv">sb</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/sb_env/bin/activate'</span>
<span class="nb">alias </span><span class="nv">k2c</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/k2-cpu/bin/activate'</span>
<span class="nb">alias </span><span class="nv">k2g</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/k2-gpu/bin/activate'</span>
<span class="nb">alias </span><span class="nv">nemo</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/nemo/bin/activate'</span>
<span class="nb">alias </span><span class="nv">esp</span><span class="o">=</span><span class="s1">'source /mnt/users/sagarst/envs/esp/bin/activate'</span>

<span class="c"># Shortcut for editing bashrc</span>
<span class="nb">alias </span><span class="nv">bashrc</span><span class="o">=</span><span class="s1">'vim ~/.bashrc'</span>

<span class="c"># Alias for removing specific file types</span>
<span class="nb">alias </span><span class="nv">rmr</span><span class="o">=</span><span class="s1">'rm -rf *.out *.err *.logs'</span>

<span class="c"># Custom Command for Starting GPU</span>
<span class="nb">alias </span><span class="nv">start_int_gpu</span><span class="o">=</span><span class="s1">'/home/sagar/bin/start_int_gpu.sh $1 $2 $3'</span>

<span class="c"># VPN Connection Alias</span>
<span class="nb">alias </span>eml-vpn<span class="o">=</span><span class="s1">'sudo openvpn --verb 3 --config /home/eml-speech/work/vpn/sangeet_sagar@vpn.eml.org.ovpn'</span>

<span class="c"># GPU Management</span>
<span class="nb">alias </span><span class="nv">gpu</span><span class="o">=</span><span class="s1">'export CUDA_VISIBLE_DEVICES=$(nvisel --max-count 1 --min-free-memory 5GiB --max-gpu-utilization 50)'</span>

<span class="c"># Listing Aliases</span>
<span class="nb">alias </span><span class="nv">lsr</span><span class="o">=</span><span class="s1">'eza --icons=always -R'</span>    <span class="c"># Recursive listing</span>
<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">'eza --icons=always --sort modified -l'</span>  <span class="c"># Detailed listing with human-readable sizes, sorted by modification time</span>
<span class="nb">alias </span><span class="nv">lls</span><span class="o">=</span><span class="s1">'eza --icons=always -l'</span>  <span class="c"># Detailed listing with human-readable sizes, sorted by modification time</span>
<span class="nb">alias </span><span class="nv">ltr</span><span class="o">=</span><span class="s1">'eza --icons=always  -ltr'</span>  <span class="c"># List sorted by modification time</span>

<span class="c"># Conda environment listing</span>
<span class="nb">alias </span><span class="nv">condalist</span><span class="o">=</span><span class="s2">"conda info -e"</span>

<span class="c"># GPU job submission command</span>
<span class="nb">alias </span><span class="nv">qgpu</span><span class="o">=</span><span class="s2">"srun --pty --mem=16gb -n 1 --gres=gpu:1 /bin/bash"</span>

<span class="c"># Monitoring GPU</span>
<span class="nb">alias </span><span class="nv">nsmi</span><span class="o">=</span><span class="s2">"nvitop"</span> <span class="c"># Advanced GPU monitoring</span>
<span class="nb">alias </span><span class="nv">nvsmi</span><span class="o">=</span><span class="s2">"watch --color -n 1 nvidia-smi"</span> <span class="c"># Regular monitoring with auto-refresh</span>
<span class="nb">alias </span><span class="nv">nsmil</span><span class="o">=</span><span class="s1">'nvidia-smi'</span> <span class="c"># Simple call to nvidia-smi</span>

<span class="c"># SGE job queue status</span>
<span class="nb">alias stat</span><span class="o">=</span><span class="s1">'squeue -u sagar -o "%.6i %9P %15j %.6u %.10T %.10M %.10l %.6D %10R %s %.10g"'</span>

<span class="c"># TTS Command</span>
<span class="nb">alias </span><span class="nv">rekni</span><span class="o">=</span><span class="s1">'espeak -v europe/cs -s 150'</span>


</code></pre></div></div> <hr/> <h2 id="vimrc">.vimrc</h2> <p>Vim editor configuration with custom key mappings, plugins, and settings for efficient text editing.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span><span class="nv">pastetoggle</span><span class="o">=</span>&lt;F3&gt;
<span class="nb">set </span>number
<span class="nb">set </span>cursorline
<span class="nb">set </span><span class="nv">backspace</span><span class="o">=</span>indent,eol,start


</code></pre></div></div> <p>&lt;/details&gt;</p> <hr/> <h2 id="-quick-setup">🚀 Quick Setup</h2> <p>To use these configurations:</p> <ol> <li><strong>Backup your existing files</strong> (important!) <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> ~/.bashrc ~/.bashrc.backup
<span class="nb">cp</span> ~/.zshrc ~/.zshrc.backup
<span class="c"># ... repeat for other files</span>
</code></pre></div> </div> </li> <li> <p><strong>Copy the desired configurations</strong> to your home directory</p> </li> <li><strong>Source the files</strong> or restart your terminal <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
<span class="nb">source</span> ~/.zshrc
</code></pre></div> </div> </li> <li><strong>Requirement</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git-lfs
zoxide
eza
zsh
zsh-autosuggestions
zsh-syntax-highlighting
</code></pre></div> </div> </li> </ol> <h2 id="-notes">📝 Notes</h2> <ul> <li>These configurations are optimized for Linux/Unix environments</li> <li>Some functions may require additional tools or packages</li> <li>Feel free to modify according to your specific needs</li> <li>Regular updates and improvements are made to these files</li> </ul> <h2 id="-contributing">🤝 Contributing</h2> <p>Found a bug or have a suggestion? Feel free to reach out or submit improvements!</p> <hr/> <p><em>Last updated: July 2025</em></p>]]></content><author><name>Sangeet Sagar</name></author><category term="tutorial"/><category term="bash"/><category term="zsh"/><category term="shell-configuration"/><category term="terminal"/><category term="productivity"/><summary type="html"><![CDATA[A collection of fine-tuned shell configuration files including bashrc, zshrc, custom functions, and more to boost terminal productivity.]]></summary></entry><entry><title type="html">RNN-T in Automatic Speech Recognition</title><link href="https://sangeet2020.github.io/blog/2024/RNN-T-based-ASR-model/" rel="alternate" type="text/html" title="RNN-T in Automatic Speech Recognition"/><published>2024-01-14T17:40:16+01:00</published><updated>2024-01-14T17:40:16+01:00</updated><id>https://sangeet2020.github.io/blog/2024/RNN-T%20based%20ASR%20model</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2024/RNN-T-based-ASR-model/"><![CDATA[<h2 id="introduction"><strong>Introduction</strong></h2> <p>In this blog post, we will briefly discuss the popular transducer based model- RNN-T in speech recognition. It does not discuss everything from one particular paper but represents my understanding from multiple sources and <a href="https://lorenlugosch.github.io/posts/2020/11/transducer/">Lugosch, 2020</a>’s blog on the same topic. Lately, these models have shown popular interest in the industry due to its natural streaming ability.</p> <h2 id="model-components"><strong>Model Components</strong></h2> <p>The RNN-T model comprises three modules: an encoder, a decoder, and a joiner network. Notably, the predictor in RNN-T operates in an autoregressive manner- meaning the previous output generated by the joiner is fed back into the predictor in order to predict the next output.</p> <p>The joiner network combines the outputs of the encoder and predictor, generating a probability distribution over all labels and a null output (\(\phi\)). Note that the predictor relies only on \(\mathbf{y}\) (labels from the text transcript) rather than both \(\mathbf{x}\) and \(\mathbf{y}\), unlike attention-based models. This means one can pre-train the predictor model on a large amount of text.</p> <h2 id="greedy-search-algorithm"><strong>Greedy Search Algorithm</strong></h2> <p>During the inference phase, RNN-T employs a greedy search algorithm. At each time step \(t\), decisions are made by maximizing computed probabilities. If a label is selected, it is appended to the output sequence \(y\); otherwise, if a blank label \(\phi\) is encountered we move to the next time-step, maintaining the sequential prediction process.</p> <p>Starting with \(t=1\), \(u=0\), and an empty set \(y={}\), the initial output (\(h_{t,u}\) computed using \(f_t\) and \(g_t\)) unfolds with two scenarios:</p> <ol> <li>If \(\arg \max(h_{t,u})\) corresponds to a label (let’s say \([A]\)), then \(y={A}\), and the time step \(t\) remains at 1.</li> <li>If \(\arg \max(h_{t,u})\) is \(\phi\) (indicating a blank label), the predictor advances to the next time step, making \(t=2\), i.e., \(t\) increments by 1.</li> </ol> <div class="row justify-content-center"> <div class="col-sm mt-3 mt-md-0" style="max-width: 600px; text-align: center;"> <figure> <picture> <img src="/assets/img/greedy_search.png" class="img-fluid rounded z-depth-1 mx-auto" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Illustration of a greedy search algorithm in RNN-T. <a href="https://lorenlugosch.github.io/posts/2020/11/transducer/">Reference</a> (Lugosch, 2020) </div> <h2 id="training-dynamics"><strong>Training Dynamics</strong></h2> <p>Training RNN-T involves horizontal transitions for blank labels and vertical transitions for actual labels. The forward variable \(\alpha_{t,u}\) is computed using a recursive formula:</p> \[\alpha_{t,u} = h_{t, u-1} [y_{u-1}] \cdot \alpha_{t, u-1} + h_{t-1, u}[\phi] \cdot\alpha_{t-1, u}\] <p>The above equation represents the computation of the forward variable \(\alpha_{t,u}\). Following this computation, we derive the probability \(p(\mathbf{y}|\mathbf{x})\), indicating the likelihood of a label given acoustic features, expressed as</p> \[p(\mathbf{y}|\mathbf{x}) = \alpha_{T,U} \cdot h_{T,U} [\phi]\] <div class="row justify-content-center"> <div class="col-sm mt-3 mt-md-0" style="max-width: 400px; text-align: center;"> <figure> <picture> <img src="/assets/img/rnnt_forward_message.png" class="img-fluid rounded z-depth-1 mx-auto" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Computation of forward variable in RNN-T training. <a href="https://lorenlugosch.github.io/posts/2020/11/transducer/">Reference</a> (Lugosch, 2020) </div> <h2 id="state-of-the-art-pruned-rnn-t"><strong>State-of-the-Art: Pruned RNN-T</strong></h2> <p>A noteworthy advancement is introduced in the paper titled ‘‘Pruned RNN-T for fast, memory-efficient ASR training’’ (<a href="https://arxiv.org/abs/2206.13236">link</a>). This involves a stateless prediction network, an alternative to the traditional RNN decoder. The predictor, similar to a bi-gram language model, simplifies the architecture by relying solely on the last output symbol, eliminating the need for recurrent layers. Its sole purpose lies in assisting the model to output an actual label or a blank label.</p> <h2 id="alignment-in-rnn-t"><strong>Alignment in RNN-T</strong></h2> <p>The Transducer in RNN-T defines a set of possible monotonic alignments between the input sequence \(x\) and the output sequence \(y\). These alignments, illustrated using an example with the word “CAT,” showcase the model’s ability to align labels with input features.</p> <div class="row justify-content-center"> <div class="col-sm mt-3 mt-md-0" style="max-width: 600px; text-align: center;"> <figure> <picture> <img src="/assets/img/cat-align-1.png" class="img-fluid rounded z-depth-1 mx-auto" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>(This example along with the equation has been taken from <a href="https://lorenlugosch.github.io/posts/2020/11/transducer/">Lugosch, 2020</a>)</p> <p>We can calculate the probability of one of these alignments by multiplying together the values of each edge along the path:</p> \[\mathbf{z} = \phi, C, A, \phi, T, \phi, \phi\] \[p(\mathbf{z} | \mathbf{x}) = h_{1,0}[\phi] \cdot h_{2,0}[C] \cdot h_{2,1}[A] \cdot h_{2,2}[\phi] \cdot h_{3,2}[T] \cdot h_{3,3}[\phi] \cdot h_{4,3}[\phi]\] <h2 id="conclusion"><strong>Conclusion</strong></h2> <p>As we conclude the post, you now possess at least a basic understanding of RNN-T models and the functional principle behind it in the context of Automatic Speech Recognition (ASR). The way encoder, decoder, and joiner networks work together, along with features like stateless predictions, makes RNN-T easier to train.</p>]]></content><author><name>Sangeet Sagar</name></author><category term="tutorial"/><category term="ASR"/><category term="RNN-T"/><category term="deep-learning"/><summary type="html"><![CDATA[The article explores the architecture and training processes of the RNN-T model in ASR.]]></summary></entry><entry><title type="html">Pruned RNN-T Explained</title><link href="https://sangeet2020.github.io/blog/2024/Pruned_RNNT/" rel="alternate" type="text/html" title="Pruned RNN-T Explained"/><published>2024-01-07T17:40:16+01:00</published><updated>2024-01-07T17:40:16+01:00</updated><id>https://sangeet2020.github.io/blog/2024/Pruned_RNNT</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2024/Pruned_RNNT/"><![CDATA[<h2 id="paper-theme"><strong>Paper theme</strong></h2> <p>RNN-T has a slow and memory-intensive loss function, limiting its use for large vocabularies like Chinese characters. The main idea of Pruned RNN-T is to reduce computational and memory requirements by selectively evaluating the joiner network, leading to faster training and maintained accuracy. Pruning bounds are obtained using a linear joiner network in the encoder and decoder embeddings.</p> <p><a href="https://github.com/k2-fsa/k2/blob/415fe1f446fffe1d9e7219b5033966294c0b430c/k2/python/k2/rnnt_loss.py#L636">Source Code</a></p> <h2 id="introduction"><strong>Introduction</strong></h2> <ul> <li> <p>Three popular E2E models are CTC models, attention-based models, and RNN-T models, with RNN-T being suitable for streaming decoding and doesn’t assume frames are independent,</p> </li> <li>The output of an RNN-T model is a 4-D tensor (\(N\), \(T\), \(U\), \(V\)) <ul> <li>\(N\) : batch size</li> <li>\(T\) : output length</li> <li>\(U\) : prediction length</li> <li>\(V\) : vocabulary size, which consumes a lot of memory.</li> </ul> </li> <li>Removing padding, function merging and half-precision training are approaches to reduce memory usage in RNN-T</li> <li>In this paper RNN-T = RNN-T loss = transducer loss</li> <li>The paper uses a Conformer encoder and a stateless decoder in their experiments, not a recurrent encoder and decoder.</li> </ul> <h2 id="motivations"><strong>Motivations</strong></h2> <div class="row justify-content-center"> <div class="col-sm mt-3 mt-md-0" style="max-width: 300px; text-align: center;"> <figure> <picture> <img src="/assets/img/transducer_model.png" class="img-fluid rounded z-depth-1 mx-auto" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Illustration of a generic transducer model. <a href="https://lorenlugosch.github.io/posts/2020/11/transducer/">Reference</a> (Lugosch, 2020) </div> <p><strong>Tokens:</strong></p> <ul> <li>The transducer model utilizes tokens, such as the Beginning-Of-Sequence (BOS) token <code class="language-plaintext highlighter-rouge">&lt;s&gt;</code> placed at <code class="language-plaintext highlighter-rouge">y0</code>, and a blank token (∅). It has no EOS.</li> </ul> <p><strong>Equations:</strong></p> <ul> <li><strong>Input Features:</strong> <ul> <li>Denoted as: \(\mathbf{x} = \{x_0, x_1, x_2, \ldots, x_{t-1}\} \equiv X_{(T, E)}\)</li> <li>These represent the input features, typically derived from audio or text data.</li> </ul> </li> <li><strong>Tokenized Transcript:</strong> <ul> <li>Denoted as: \(\mathbf{y} = \{y_0, y_1, y_2, \ldots, y_u\}\) (with a total of \(U\) tokens)</li> <li>Represents the tokenized transcript, where each \(y_i\) corresponds to a token in the output sequence.</li> </ul> </li> <li><strong>Predictor Network (Decoder):</strong> <ul> <li>The predictor network, or decoder, is autoregressive. It takes the previous output as input and generates features used for generating the next output token.</li> </ul> </li> <li>RNN-T loss computation can be memory and compute-intensive due to the large output shape: \(N \times T \times U \times V\).</li> </ul> <div class="row justify-content-center"> <div class="col-sm mt-3 mt-md-0" style="max-width: 600px; text-align: center;"> <figure> <picture> <img src="/assets/img/Pruned_RNNT_lattice.png" class="img-fluid rounded z-depth-1 mx-auto" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> This illustration shows the lattice in standard RNN-T (right) vs pruned RNN-T (left). <a href="https://arxiv.org/pdf/2206.13236.pdf">arXiv</a> (Fangjun Kuang, 2022) </div> <details><summary>What is a lattice? and why is it important?</summary> <p>The lattice represents the log-probs of transition between the time steps and label indices. They are important because they capture the likelihood of transition to a token at a time step.</p> </details> <ul> <li>Pruned RNN-T limits the token range from \(U\) to \(S\) at each time step, reducing output shape to \((T, S, V)\). This reduction reduces memory consumption and speeds up training.</li> </ul> <h2 id="pruned-rnn-t"><strong>Pruned RNN-T</strong></h2> <ul> <li>Pruned RNN-T selectively evaluates the joiner network for specific $(t, u)$ pairs that have a significant impact on the final loss. This is achieved by performing the core recursion of the model twice: <ul> <li>First, with a “trivial” joiner network, which is fast to evaluate, to identify important pairs.</li> <li>Then, the full joiner network is evaluated only for a subset of (t, u) pairs.</li> </ul> </li> <li> <p><strong>Trivial joiner network</strong>: The trivial joiner network is a simplified approach to computing the joiner network in the RNN-T model, using matrix multiplication and lookups to efficiently obtain log probabilities for the pruned RNN-T model. \(y(t,u) \rightarrow \text{log-probs of vertical transition}\)<br/> \(\phi(t,u) \rightarrow \text{log-probs of horizontal transition}\)<br/> \(L_{enc}(t,u) \rightarrow \text{unnormalized log-probs associated with encoder}\)<br/> \(L_{dec}(t,u) \rightarrow \text{unnormalized log-probs associated with decoder aka. prediction network}\)<br/></p> <p>Log probs associated with the joiner is given by</p> \[L_{trivial} = L_{enc} + L_{dec} - \log \left( \sum \exp({L_{enc} + L_{dec}}) \right)\] <p>this equation allows us to compute \(y(t,u)\) and \(\phi(t,u)\)</p> </li> <li><strong>Pruning bounds</strong>: Pruning involves selecting a constant \(S\) (eg 4 or 5) to limit the evaluation of \(L(t, u, v)\) for specific \(u\) indexes within a given \(t\) index. In the above illustration, the lattice on the right will have \(L(t,u,v)\) computed for only for \(p_t \leq u &lt; p_t + S\) indices, while the rest is set to \(-\infty\). To compute the <strong>globally optimal pruning bounds</strong> we want to find a sequence of integer pruning bounds \(p=p_0, p_t, ... p_{T-1}\) that maximizes the total retained probability. It is basically finding positions for pruning in the lattice such that the total probability of retained transition is maximized. Here we are trying to retain the highest probability transition while discarding the less relevant ones.</li> </ul> <p>In the context of the pruned RNN-T model, the quantities \(y′(t, u)\) and \(\phi′(t, u)\) represent “occupation counts” within a specific interval, indicating the likelihood of upward and rightward transitions. Lets estimate the retained probability mass for \(S=4\) (no. of label indices to be evaluated at each time step \(t\)) and \(p_t=2\) (pruning bound)–</p> \[\phi'(t,2) + \phi'(t,3) + \phi'(t,4) + \phi'(t,5) - y'(t,1)\] <p>The occupation count \(y'\) in the above equation represents the probability associated with label index 1 which is red in the above lattice diagram. The subtraction is done to make the calculation more accurate by compensating for the inclusion of some probability mass that should have been pruned out due to lower \(u\) values.</p> <ul> <li><strong>Loss function</strong>: <a href="https://github.com/k2-fsa/k2/blob/415fe1f446fffe1d9e7219b5033966294c0b430c/k2/python/k2/rnnt_loss.py#L450">Source Code</a> The loss function is a combination of log-probs from trivial joiner network and full joiner network.</li> </ul> \[L_{smoothed} = (1- \alpha^{lm} - \alpha^{acoustic})L_{trivial} + \alpha^{lm}L_{lm} + \alpha^{acoustic}L_{lm}\] <p><em>Refer to Section 3.3 in the paper for a more detailed explanation</em></p> <h2 id="experimental-settings"><strong>Experimental Settings</strong></h2> <table border="1" cellpadding="5"> <tr> <th>Category</th> <th>Parameter/Hyperparameter</th> <th>Value</th> </tr> <tr> <td rowspan="4">Dataset</td> <td>Corpus</td> <td>LibriSpeech</td> </tr> <tr> <td>Training Hours</td> <td>960 hours</td> </tr> <tr> <td>Test Sets</td> <td>test-clean, test-other</td> </tr> <tr> <td>Test Set Speech Duration</td> <td>Approximately 5 hours each</td> </tr> <tr> <td rowspan="3">Input Features</td> <td>Feature Type</td> <td>80-dimension log Mel filter bank</td> </tr> <tr> <td>Window Size</td> <td>25 ms</td> </tr> <tr> <td>Window Shift</td> <td>10 ms</td> </tr> <tr> <td>Data Augmentation</td> <td>SpecAugment Factors</td> <td>0.9 and 1.1</td> </tr> <tr> <td rowspan="4">Model Architecture</td> <td>Encoder</td> <td>Conformer with 12 layers</td> </tr> <tr> <td>Encoder Self-Attention</td> <td>8 heads</td> </tr> <tr> <td>Encoder Attention Dim</td> <td>512</td> </tr> <tr> <td>Encoder Feed-Forward Dim</td> <td>2048</td> </tr> <tr> <td rowspan="2">Decoder</td> <td>Stateless decoder with embedding layer and 1-D convolutional layer</td> <td> </td> </tr> <tr> <td>Decoder Embedding Dim</td> <td>512</td> </tr> <tr> <td>GPUs</td> <td>Number of GPUs</td> <td>8 NVIDIA V100 32GB GPUs</td> </tr> <tr> <td rowspan="2">Training Strategy</td> <td>Pruning Strategy</td> <td>Enable pruned loss after convergence of trivial loss</td> </tr> </table> <h2 id="results">Results</h2> <ul> <li>Pruned RNN-T outperforms other implementations in terms of speed and memory efficiency.</li> <li>When comparing Word Error Rates (WERs) on the LibriSpeech test-clean and test-other datasets, the model trained with pruned RNN-T shows slightly better WER performance compared to the model trained with unpruned RNN-T loss. This suggests that pruned RNN-T can achieve comparable or better accuracy in ASR tasks.</li> </ul> <div class="row justify-content-center"> <div class="col-sm mt-3 mt-md-0" style="max-width: 500px; text-align: center;"> <figure> <picture> <img src="/assets/img/Pruned_RNNT_results.png" class="img-fluid rounded z-depth-1 mx-auto" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The memory efficiency of pruned RNN-T allows for the use of larger batch sizes and vocabulary sizes during training, which further contributes to its speed advantage.</li> </ul>]]></content><author><name>Sangeet Sagar</name></author><category term="tutorial"/><summary type="html"><![CDATA[This blog explains the paper- ``Pruned RNN-T for fast, memory-efficient ASR training'']]></summary></entry><entry><title type="html">icefall- Feature Extraction Pipeline</title><link href="https://sangeet2020.github.io/blog/2023/feature_extraction/" rel="alternate" type="text/html" title="icefall- Feature Extraction Pipeline"/><published>2023-08-26T18:40:16+02:00</published><updated>2023-08-26T18:40:16+02:00</updated><id>https://sangeet2020.github.io/blog/2023/feature_extraction</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2023/feature_extraction/"><![CDATA[<h2 id="feature-extraction">Feature extraction</h2> <p>Lets see what happens in <code class="language-plaintext highlighter-rouge">local/compute_fbank_commonvoice_splits.py</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extractor <span class="o">=</span> KaldifeatFbank<span class="o">(</span>KaldifeatFbankConfig<span class="o">(</span><span class="nv">device</span><span class="o">=</span>device<span class="o">))</span>
</code></pre></div></div> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">'config':</span><span class="w"> </span><span class="err">KaldifeatFbankConfig(</span><span class="w">
                </span><span class="err">frame_opts=KaldifeatFrameOptions(</span><span class="w">
                    </span><span class="err">sampling_rate=</span><span class="mi">16000</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">frame_shift=</span><span class="mf">0.01</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">frame_length=</span><span class="mf">0.025</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">dither=</span><span class="mf">0.0</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">preemph_coeff=</span><span class="mf">0.97</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">remove_dc_offset=True</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">window_type='povey'</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">round_to_power_of_two=True</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">blackman_coeff=</span><span class="mf">0.42</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">snip_edges=False</span><span class="w">
                </span><span class="err">)</span><span class="p">,</span><span class="w"> 
            </span><span class="err">mel_opts=KaldifeatMelOptions(</span><span class="w">
                    </span><span class="err">num_bins=</span><span class="mi">80</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">low_freq=</span><span class="mf">20.0</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">high_freq=</span><span class="mf">-400.0</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">vtln_low=</span><span class="mf">100.0</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">vtln_high=</span><span class="mf">-500.0</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">debug_mel=False</span><span class="p">,</span><span class="w"> 
                    </span><span class="err">htk_mode=False</span><span class="w">
                </span><span class="err">)</span><span class="p">,</span><span class="w"> 
            </span><span class="err">use_energy=False</span><span class="p">,</span><span class="w"> 
            </span><span class="err">energy_floor=</span><span class="mi">1e-10</span><span class="p">,</span><span class="w"> 
            </span><span class="err">raw_energy=True</span><span class="p">,</span><span class="w"> 
            </span><span class="err">htk_compat=False</span><span class="p">,</span><span class="w"> 
            </span><span class="err">use_log_fbank=True</span><span class="p">,</span><span class="w"> 
            </span><span class="err">use_power=True</span><span class="p">,</span><span class="w"> 
            </span><span class="err">device=device(type='cpu')</span><span class="p">,</span><span class="w"> 
            </span><span class="err">chunk_size=</span><span class="mi">120000</span><span class="w">
        </span><span class="err">)</span><span class="p">,</span><span class="w"> 
        </span><span class="err">'extractor':</span><span class="w"> </span><span class="err">Fbank()</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>This is used to compute features..</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Computing features</span><span class="sh">"</span><span class="p">)</span>
<span class="n">cut_set</span> <span class="o">=</span> <span class="n">cut_set</span><span class="p">.</span><span class="nf">compute_and_store_features_batch</span><span class="p">(</span>
           <span class="n">extractor</span><span class="o">=</span><span class="n">extractor</span><span class="p">,</span>
           <span class="n">storage_path</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">output_dir</span><span class="si">}</span><span class="s">/commonvoice_feats_</span><span class="si">{</span><span class="n">subset</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">idx</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
           <span class="n">num_workers</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">num_workers</span><span class="p">,</span>
           <span class="n">batch_duration</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">batch_duration</span><span class="p">,</span>
           <span class="n">storage_type</span><span class="o">=</span><span class="n">LilcomChunkyWriter</span><span class="p">,</span>
           <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
       <span class="p">)</span>
</code></pre></div></div> <p>The function <code class="language-plaintext highlighter-rouge">compute_and_store_features_batch</code> in code above is found in <code class="language-plaintext highlighter-rouge">lhotse/lhotse/cut/set.py(2102)</code> <br/></p> <p>Lets see what this <code class="language-plaintext highlighter-rouge">feat_manifest</code> is</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Features</span><span class="p">(</span>
    <span class="nb">type</span><span class="o">=</span><span class="sh">'</span><span class="s">kaldifeat-fbank</span><span class="sh">'</span><span class="p">,</span> 
    <span class="n">num_frames</span><span class="o">=</span><span class="mi">11057</span><span class="p">,</span> 
    <span class="n">num_features</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> 
    <span class="n">frame_shift</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> 
    <span class="n">sampling_rate</span><span class="o">=</span><span class="mi">16000</span><span class="p">,</span> 
    <span class="n">start</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> 
    <span class="n">duration</span><span class="o">=</span><span class="mf">110.570375</span><span class="p">,</span> 
    <span class="n">storage_type</span><span class="o">=</span><span class="sh">'</span><span class="s">lilcom_chunky</span><span class="sh">'</span><span class="p">,</span> 	
    <span class="n">storage_path</span><span class="o">=</span><span class="sh">'</span><span class="s">data/fbank/commonvoice_train_split_1000/commonvoice_feats_train_0001.lca</span><span class="sh">'</span><span class="p">,</span> 	
    <span class="n">storage_key</span><span class="o">=</span><span class="sh">'</span><span class="s">0,40733,41792,41952,41943,42282,41001,40090,39964,40992,41959,41793,41068,41138,41037,41167,41398,41026,41822,41264,40818,41864,37953,5273</span><span class="sh">'</span><span class="p">,</span> 
    <span class="n">recording_id</span><span class="o">=</span><span class="sh">'</span><span class="s">None</span><span class="sh">'</span><span class="p">,</span> 
    <span class="n">channels</span><span class="o">=</span><span class="mi">0</span>
<span class="p">)</span>
</code></pre></div></div> <h2 id="cuts">Cuts</h2> <p>Contents of</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">gzip</span> <span class="nt">-cd</span> data/fbank/commonvoice_cuts_valid_raw.jsonl.gz | <span class="nb">head</span> <span class="nt">-n</span> 1
</code></pre></div></div> <p>This is basically how cut looks like</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
   </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"sample_001-0"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"start"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"duration"</span><span class="p">:</span><span class="mf">110.1538125</span><span class="p">,</span><span class="w">
   </span><span class="nl">"channel"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"supervisions"</span><span class="p">:[</span><span class="w">
      </span><span class="p">{</span><span class="w">
         </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"sample_001"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"recording_id"</span><span class="p">:</span><span class="s2">"sample_001"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"start"</span><span class="p">:</span><span class="mf">0.0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"duration"</span><span class="p">:</span><span class="mf">110.1525</span><span class="p">,</span><span class="w">
         </span><span class="nl">"channel"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"text"</span><span class="p">:</span><span class="s2">"&lt;unk&gt; SOME TRANSCRIPT GOES HERE ..."</span><span class="p">,</span><span class="w">
         </span><span class="nl">"language"</span><span class="p">:</span><span class="s2">"de"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"speaker"</span><span class="p">:</span><span class="s2">"0000000025-spk1_deu"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"custom"</span><span class="p">:{</span><span class="w">
            </span><span class="nl">"utt_id"</span><span class="p">:</span><span class="s2">"recording_001_speaker_002"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"end"</span><span class="p">:</span><span class="mf">110.1525</span><span class="w">
         </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
   </span><span class="p">],</span><span class="w">
   </span><span class="nl">"recording"</span><span class="p">:{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"sample_001"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"sources"</span><span class="p">:[</span><span class="w">
         </span><span class="p">{</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"file"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"channels"</span><span class="p">:[</span><span class="w">
               </span><span class="mi">0</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="s2">"sample_001.wav"</span><span class="w">
         </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"sampling_rate"</span><span class="p">:</span><span class="mi">16000</span><span class="p">,</span><span class="w">
      </span><span class="nl">"num_samples"</span><span class="p">:</span><span class="mi">1762461</span><span class="p">,</span><span class="w">
      </span><span class="nl">"duration"</span><span class="p">:</span><span class="mf">110.1538125</span><span class="p">,</span><span class="w">
      </span><span class="nl">"channel_ids"</span><span class="p">:[</span><span class="w">
         </span><span class="mi">0</span><span class="w">
      </span><span class="p">]</span><span class="w">
   </span><span class="p">},</span><span class="w">
   </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"MonoCut"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[This tutorial walks you through how feature extraction is done in icefall.]]></summary></entry><entry><title type="html">icefall- Audio read</title><link href="https://sangeet2020.github.io/blog/2023/icefall_audio_read/" rel="alternate" type="text/html" title="icefall- Audio read"/><published>2023-08-26T18:40:16+02:00</published><updated>2023-08-26T18:40:16+02:00</updated><id>https://sangeet2020.github.io/blog/2023/icefall_audio_read</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2023/icefall_audio_read/"><![CDATA[<h2 id="where-exactly-audio-read-and-feature-extraction-kaldifeat-fbank-is-done-in-lhotse">Where exactly audio read and feature extraction (KaldiFeat fbank) is done in Lhotse?</h2> <h3 id="audio-read">Audio read</h3> <p>The process begins with the creation of a UnsupervisedWaveformDataset object in Lhotse.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dataset <span class="o">=</span> UnsupervisedWaveformDataset<span class="o">(</span><span class="nv">collate</span><span class="o">=</span>collate<span class="o">)</span>
</code></pre></div></div> <p>A DataLoader is then created from the dataset [see: <code class="language-plaintext highlighter-rouge">lhotse/cut/set.py</code>].</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dloader <span class="o">=</span> DataLoader<span class="o">(</span> dataset, <span class="nv">batch_size</span><span class="o">=</span>None, <span class="nv">sampler</span><span class="o">=</span>sampler, <span class="nv">num_workers</span><span class="o">=</span>num_workers <span class="o">)</span>
</code></pre></div></div> <p>Inside <code class="language-plaintext highlighter-rouge">UnsupervisedWaveformDataset</code> class (<code class="language-plaintext highlighter-rouge">lhotse/lhotse/dataset/unsupervised.py</code>), <code class="language-plaintext highlighter-rouge">__getitem__</code> returns</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span><span class="p">.</span><span class="nf">load_audio</span><span class="p">()</span>
<span class="p">{</span>
<span class="sh">"</span><span class="s">cuts</span><span class="sh">"</span><span class="p">:</span> <span class="n">cuts</span><span class="p">,</span>
<span class="sh">"</span><span class="s">audio</span><span class="sh">"</span><span class="p">:</span> <span class="n">audio</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <p>So when we iterate through the <code class="language-plaintext highlighter-rouge">dloader</code>, we get <code class="language-plaintext highlighter-rouge">cuts</code> and <code class="language-plaintext highlighter-rouge">audio</code> tensor -</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">dloader</span><span class="p">:</span>
	<span class="n">cuts</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">"</span><span class="s">cuts</span><span class="sh">"</span><span class="p">]</span>
	<span class="n">waves</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">"</span><span class="s">audio</span><span class="sh">"</span><span class="p">]</span>
</code></pre></div></div> <p>To get <code class="language-plaintext highlighter-rouge">audio</code> tensor, we can simply do</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">cut</span> <span class="ow">in</span> <span class="n">cut_set</span><span class="p">:</span> 
   <span class="nf">print</span><span class="p">(</span><span class="n">cut</span><span class="p">.</span><span class="nf">load_audio</span><span class="p">())</span>
</code></pre></div></div> <p>Further to extract features in <code class="language-plaintext highlighter-rouge">set.py</code>,</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">features</span> <span class="o">=</span> <span class="n">extractor</span><span class="p">.</span><span class="nf">extract_batch</span><span class="p">(</span> <span class="n">waves</span><span class="p">,</span> <span class="n">sampling_rate</span><span class="o">=</span><span class="n">cuts</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">sampling_rate</span><span class="p">,</span> <span class="n">lengths</span><span class="o">=</span><span class="n">wave_lens</span> <span class="p">)</span>
</code></pre></div></div> <p>Extractor has been explained <a href="https://sangeet2020.github.io/blog/2023/feature_extraction/">here</a>. The function <code class="language-plaintext highlighter-rouge">extract_batch</code> is present in <code class="language-plaintext highlighter-rouge">lhotse/features/kaldifeat.py</code>. The actual Kaldifeat fbank feature extraction takes place in here (<code class="language-plaintext highlighter-rouge">lhotse/features/kaldifeat.py</code>) – this is because the extractor specifies the type of feature I.e. <code class="language-plaintext highlighter-rouge">Kaldifeat</code> fbank) -</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">kaldifeat</span> 
<span class="n">self</span><span class="p">.</span><span class="n">extractor</span> <span class="o">=</span> <span class="n">kaldifeat</span><span class="p">.</span><span class="nc">Fbank</span><span class="p">(</span><span class="n">kaldifeat</span><span class="p">.</span><span class="n">FbankOptions</span><span class="p">.</span><span class="nf">from_dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="nf">to_dict</span><span class="p">())</span> <span class="p">)</span>
<span class="c1"># Actual feature extraction. 
</span><span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">extractor</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span> <span class="n">chunk_size</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="n">chunk_size</span><span class="p">)</span>
</code></pre></div></div> <p>Once the Kaldifeat fbank features are computed, they are sent to further processing -</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">_save_worker</span><span class="p">(</span><span class="n">cuts</span><span class="p">,</span> <span class="n">features</span><span class="p">)</span><span class="o">-</span> <span class="n">this</span> <span class="ow">is</span> <span class="n">done</span> <span class="ow">in</span> <span class="n">lhotse</span><span class="o">/</span><span class="n">cut</span><span class="o">/</span><span class="nb">set</span><span class="p">.</span><span class="n">py</span>			
</code></pre></div></div> <p>No matter what start or end times are specified, the feature extraction process will compute features for the entire audio file. If the associated transcript for the audio file specifies a segment, such as from 5 seconds to 8 seconds within a 20-minute long audio, the computed features should be trimmed to this specific segment before being saved to the LCA-compressed file. Lets see how this is done in _save_worker(cuts, features)</p> <p>Inside the below function, the actual trimming is done (<code class="language-plaintext highlighter-rouge">set.py</code>)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Features= lhotse.features.base.Features
</span><span class="n">feat_manifest</span> <span class="o">=</span> <span class="nc">Features</span><span class="p">(</span> 
      <span class="n">start</span><span class="o">=</span><span class="n">cut</span><span class="p">.</span><span class="n">start</span><span class="p">,</span> 
      <span class="n">duration</span><span class="o">=</span><span class="n">cut</span><span class="p">.</span><span class="n">duration</span><span class="p">,</span> 
      <span class="nb">type</span><span class="o">=</span><span class="n">extractor</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> 
      <span class="n">num_frames</span><span class="o">=</span><span class="n">feat_mat</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> 
      <span class="n">num_features</span><span class="o">=</span><span class="n">feat_mat</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> 
      <span class="n">frame_shift</span><span class="o">=</span><span class="n">frame_shift</span><span class="p">,</span> 
      <span class="n">sampling_rate</span><span class="o">=</span><span class="n">cut</span><span class="p">.</span><span class="n">sampling_rate</span><span class="p">,</span> 
      <span class="n">channels</span><span class="o">=</span><span class="n">cut</span><span class="p">.</span><span class="n">channel</span><span class="p">,</span> 
      <span class="n">storage_type</span><span class="o">=</span><span class="n">feats_writer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> 
      <span class="n">storage_path</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">feats_writer</span><span class="p">.</span><span class="n">storage_path</span><span class="p">),</span> 
      <span class="n">storage_key</span><span class="o">=</span><span class="n">storage_key</span>
<span class="p">)</span>
</code></pre></div></div> <p>This actually writes the feature on the disk.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">storage_key</span> <span class="o">=</span> <span class="n">feats_writer</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">cut</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="n">feat_mat</span><span class="p">)</span> 
</code></pre></div></div> <p>Returns keys like: “14601,31,23,42”. The first number is the offset for the whole array, and the following numbers are relative offsets for each chunk. These offsets are relative to the previous chunk start.</p>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[This tutorial describes where does audio reading and feature extraction take place in icefall.]]></summary></entry><entry><title type="html">icefall- Data Prepration Pipeline</title><link href="https://sangeet2020.github.io/blog/2023/icefall_data_prepration/" rel="alternate" type="text/html" title="icefall- Data Prepration Pipeline"/><published>2023-08-26T18:40:16+02:00</published><updated>2023-08-26T18:40:16+02:00</updated><id>https://sangeet2020.github.io/blog/2023/icefall_data_prepration</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2023/icefall_data_prepration/"><![CDATA[<h2 id="data-prepration">Data Prepration</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0" style="max-width: 900px;"> <figure> <picture> <img src="/assets/img/Icefall-%20LibriSpeech.drawio.svg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>icefall relies on Lhotse library for data prepration. It makes audio data preparation for all recipes. Lets study and investigate whats happening at each stage.</p> <ol> <li><strong>First, manifests of the data are prepared</strong><br/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> lhotse prepare commonvoice <span class="nt">-j</span> 1 <span class="nv">$commonvoice_dir</span> data/manifests
</code></pre></div> </div> <p>In <code class="language-plaintext highlighter-rouge">data/manifests</code> you can find files like</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> data/manifests/commonvoice_recordings_train.jsonl.gz 
 data/manifests/commonvoice_supervisions_train.jsonl.gz
</code></pre></div> </div> <p>Let’s take a look at the contents of these files:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">gzip</span> <span class="nt">-cd</span> data/manifests/commonvoice_recordings_train.jsonl.gz | <span class="nb">head</span> <span class="nt">-n</span> 1
</code></pre></div> </div> <p>Sample content:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="p">{</span><span class="w">
 </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"sample_09901.wav"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"sources"</span><span class="p">:[</span><span class="w">
     </span><span class="p">{</span><span class="w">
         </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"file"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"channels"</span><span class="p">:[</span><span class="w">
             </span><span class="mi">0</span><span class="w">
         </span><span class="p">],</span><span class="w">
         </span><span class="nl">"source"</span><span class="p">:</span><span class="s2">"/home/audio/sample_09901.wav"</span><span class="w">
     </span><span class="p">}</span><span class="w">
 </span><span class="p">],</span><span class="w">
 </span><span class="nl">"sampling_rate"</span><span class="p">:</span><span class="mi">16000</span><span class="p">,</span><span class="w">
 </span><span class="nl">"num_samples"</span><span class="p">:</span><span class="mi">1769149</span><span class="p">,</span><span class="w">
 </span><span class="nl">"duration"</span><span class="p">:</span><span class="mf">110.5718125</span><span class="p">,</span><span class="w">
 </span><span class="nl">"channel_ids"</span><span class="p">:[</span><span class="w">
     </span><span class="mi">0</span><span class="w">
 </span><span class="p">]</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">gzip</span> <span class="nt">-cd</span> data/manifests/commonvoice_supervisions_train.jsonl.gz | <span class="nb">head</span> <span class="nt">-n</span> 1
</code></pre></div> </div> <p>Sample content:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="p">{</span><span class="w">
 </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"sample_09901.wav"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"recording_id"</span><span class="p">:</span><span class="s2">"sample_09901.wav"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"start"</span><span class="p">:</span><span class="mf">0.0</span><span class="p">,</span><span class="w">
 </span><span class="nl">"duration"</span><span class="p">:</span><span class="mf">110.5704</span><span class="p">,</span><span class="w">
 </span><span class="nl">"channel"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
 </span><span class="nl">"text"</span><span class="p">:</span><span class="s2">"~MUSIC i like spongebob.. so does my neighbour"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"language"</span><span class="p">:</span><span class="s2">"de"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"speaker"</span><span class="p">:</span><span class="s2">"0000000013-spk1_deu"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"custom"</span><span class="p">:{</span><span class="w">
     </span><span class="nl">"utt_id"</span><span class="p">:</span><span class="s2">"rec-037864_deu"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"end"</span><span class="p">:</span><span class="mf">110.5704</span><span class="w">
 </span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> <p><br/></p> </li> <li> <p><strong>Pre-processing of Manifests</strong><br/> The next step is the pre-processing of these manifests using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./local/preprocess_commonvoice.py
</code></pre></div> </div> <p>This involves cleaning and normalizing transcripts for train/test/valid data. It inputs</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> data/manifests/commonvoice_recordings_train.jsonl.gz
 data/manifests/commonvoice_supervisions_train.jsonl.gz
</code></pre></div> </div> <p>The processed cuts are stored in <code class="language-plaintext highlighter-rouge">data/fbank/commonvoice_cuts_train_raw.jsonl.gz</code>. <br/></p> </li> <li><strong>Further, this cut is split into 1000 pieces (<code class="language-plaintext highlighter-rouge">num_splits</code>)</strong><br/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">split_dir</span><span class="o">=</span>data/fbank/commonvoice_train_split_100/
 lhotse <span class="nb">split </span>1000 <span class="nt">-i</span> 1 ./data/fbank/commonvoice_cuts_train_raw.jsonl.gz <span class="nv">$split_dir</span>
</code></pre></div> </div> <p>However, this split is only done for the train dataset and not for other sets. These cuts are stored in:</p> <ul> <li><code class="language-plaintext highlighter-rouge">data/fbank/commonvoice_train_split_1000/commonvoice_cuts_train_raw.1.jsonl.gz</code></li> <li><code class="language-plaintext highlighter-rouge">data/fbank/commonvoice_train_split_1000/commonvoice_cuts_train_raw.2.jsonl.gz</code></li> <li><code class="language-plaintext highlighter-rouge">data/fbank/commonvoice_train_split_1000/commonvoice_cuts_train_raw.3.jsonl.gz</code></li> <li>… and so on. <br/></li> </ul> </li> <li><strong>Each of these cuts is then processed, and fbank features are computed</strong><br/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./local/compute_fbank_commonvoice_splits.py <span class="nt">--num-workers</span> <span class="nv">$nj</span> <span class="nt">--batch-duration</span> 200 <span class="nt">--start</span> 0 <span class="nt">--num-splits</span> <span class="nv">$num_splits</span>
</code></pre></div> </div> <p>Here is how the processing takes place:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Processing 1/1000
 Loading data/fbank/commonvoice_train_split_1000/commonvoice_cuts_train_raw.1.jsonl.gz
 Filtering out super short utts
 Removed 0 cuts from 1000 cuts. 0.000% data is removed.
 Doing speed perturb <span class="o">(</span>train <span class="nb">set </span>only<span class="o">)</span>
 Splitting cuts into smaller chunks.
 Computing features
 Computing features <span class="k">in </span>batches
 Saving to data/fbank/commonvoice_train_split_1000/commonvoice_cuts_train.1.jsonl.
</code></pre></div> </div> <p>At the end of each processing step, two files are created in <code class="language-plaintext highlighter-rouge">data/fbank/commonvoice_train_split_1000/</code>:</p> <ul> <li><code class="language-plaintext highlighter-rouge">commonvoice_feats_train_1.lca</code>: fbank features stored in compressed format (lilcom_chunky: *.lca)</li> <li><code class="language-plaintext highlighter-rouge">commonvoice_cuts_train.1.jsonl.gz</code>: new cut stored after filtering short sentences, doing speed perturbation, etc. For the next steps, this cut shall be used and not the <em>raw</em> one. <br/></li> </ul> </li> <li> <p><strong>Feature Combination</strong><br/> Next, the features are combined for the train set using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> lhotse combine <span class="nv">$pieces</span> data/fbank/commonvoice_cuts_train.jsonl.gz
</code></pre></div> </div> <p>This takes all the new cuts and combines them into one file <code class="language-plaintext highlighter-rouge">data/fbank/commonvoice_cuts_train.jsonl.gz</code>. Further, it shuffles them. <br/></p> </li> <li><strong>Transcript Creation and BPE Models</strong> <br/> Finally, the train transcripts are created from <code class="language-plaintext highlighter-rouge">data/fbank/commonvoice_cuts_train.jsonl.gz</code>, and BPE models are created.</li> </ol>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[This tutorial explains how data prepration is performed in icefall recipes.]]></summary></entry><entry><title type="html">Install K2-FSA/IceFall/Lhotse</title><link href="https://sangeet2020.github.io/blog/2023/install_k2_fsa/" rel="alternate" type="text/html" title="Install K2-FSA/IceFall/Lhotse"/><published>2023-08-11T18:40:16+02:00</published><updated>2023-08-11T18:40:16+02:00</updated><id>https://sangeet2020.github.io/blog/2023/install_k2_fsa</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2023/install_k2_fsa/"><![CDATA[<h2 id="k2-fsa-installation">K2-FSA Installation</h2> <p>It is recommended to install K2-FSA in separate virtual environments. We use the recommended pre-compiled wheels.</p> <ul> <li>K2-CPU Installation (Torch version 2.0.1) <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  pip <span class="nb">install </span><span class="nv">torch</span><span class="o">==</span>2.0.1+cpu <span class="nt">-f</span> https://download.pytorch.org/whl/torch_stable.html
  pip <span class="nb">install </span><span class="nv">k2</span><span class="o">==</span>1.24.3.dev20230718+cpu.torch2.0.1 <span class="nt">-f</span> https://k2-fsa.github.io/k2/cpu.html
</code></pre></div> </div> </li> <li>K2-GPU Installation (CUDA version 11.7) <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  pip <span class="nb">install </span><span class="nv">torch</span><span class="o">==</span>2.0.1+cu117 <span class="nt">-f</span> https://download.pytorch.org/whl/torch_stable.html
  pip <span class="nb">install </span><span class="nv">k2</span><span class="o">==</span>1.24.3.dev20230718+cuda11.7.torch2.0.1 <span class="nt">-f</span> https://k2-fsa.github.io/k2/cuda.html
</code></pre></div> </div> </li> </ul> <h2 id="icefall-installation">IceFall Installation</h2> <p>Installation source: <a href="https://icefall.readthedocs.io/en/latest/installation/index.html#install-cuda-toolkit-and-cudnn">IceFall Documentation</a></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/k2-fsa/icefall
<span class="nb">cd </span>icefall
pip <span class="nb">install</span> <span class="nt">-r</span> ./requirements.txt
<span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="nv">$PWD</span>:<span class="nv">$PYTHONPATH</span>
</code></pre></div></div> <h2 id="lhotse-installation">Lhotse Installation</h2> <p>Installation source: <a href="https://lhotse.readthedocs.io/en/latest/getting-started.html#installation">Lhotse Documentation</a></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/lhotse-speech/lhotse.git
pip <span class="nb">install</span> <span class="nt">-e</span> <span class="s1">'.[dev]'</span>
pre-commit <span class="nb">install
</span>pip <span class="nb">install </span>lhotse[kaldi]
</code></pre></div></div> <h2 id="installing-cuda-117-and-cudnn-89">Installing CUDA (11.7) and cuDNN (8.9)</h2> <p>Installation source: <a href="https://k2-fsa.github.io/k2/installation/cuda-cudnn.html#cuda-11-7">Icefall Documentation</a></p> <ul> <li>Installing CUDA <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">## Choose installation dir</span>
  <span class="nv">INSTALL_PATH</span><span class="o">=</span><span class="s2">"/home/sagar/bin/cuda/11.7.1/"</span>
  <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="k">${</span><span class="nv">INSTALL_PATH</span><span class="k">}</span>

  <span class="c">## Download cuda</span>
  wget https://developer.download.nvidia.com/compute/cuda/11.7.1/local_installers/cuda_11.7.1_515.65.01_linux.run

  <span class="nb">chmod</span> +x cuda_11.7.1_515.65.01_linux.run

  ./cuda_11.7.1_515.65.01_linux.run <span class="se">\</span>
  <span class="nt">--silent</span> <span class="se">\</span>
  <span class="nt">--toolkit</span> <span class="se">\</span>
  <span class="nt">--installpath</span><span class="o">=</span><span class="k">${</span><span class="nv">INSTALL_PATH</span><span class="k">}</span> <span class="se">\</span>
  <span class="nt">--no-opengl-libs</span> <span class="se">\</span>
  <span class="nt">--no-drm</span> <span class="se">\</span>
  <span class="nt">--no-man-page</span>
</code></pre></div> </div> </li> <li> <p>Installing cuDNN</p> <p>Check other available versions here: <a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN Archive by Nvidia</a></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  wget https://huggingface.co/csukuangfj/cudnn/resolve/main/cudnn-linux-x86_64-8.9.1.23_cuda11-archive.tar.xz

  <span class="nb">tar </span>xvf cudnn-linux-x86_64-8.9.1.23_cuda11-archive.tar.xz <span class="nt">--strip-components</span><span class="o">=</span>1 <span class="nt">-C</span> <span class="k">${</span><span class="nv">INSTALL_PATH</span><span class="k">}</span>
</code></pre></div> </div> </li> <li>Set environment variables <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span><span class="k">${</span><span class="nv">INSTALL_PATH</span><span class="k">}</span>
  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/bin:<span class="nv">$PATH</span>
  <span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
  <span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib:<span class="nv">$LD_LIBRARY_PATH</span>

  <span class="nb">export </span><span class="nv">CUDA_TOOLKIT_ROOT_DIR</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
  <span class="nb">export </span><span class="nv">CUDA_TOOLKIT_ROOT</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
  <span class="nb">export </span><span class="nv">CUDA_BIN_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
  <span class="nb">export </span><span class="nv">CUDA_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>
  <span class="nb">export </span><span class="nv">CUDA_INC_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/targets/x86_64-linux
  <span class="nb">export </span><span class="nv">CFLAGS</span><span class="o">=</span><span class="nt">-I</span><span class="nv">$CUDA_HOME</span>/targets/x86_64-linux/include:<span class="nv">$CFLAGS</span>
</code></pre></div> </div> </li> <li>Verify installation <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  which nvcc

  nvcc <span class="nt">--version</span>
</code></pre></div> </div> </li> </ul>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[Learn how to install K2-FSA, IceFall, and Lhotse on Linux/Ubuntu.]]></summary></entry><entry><title type="html">SpeechBrain SepFormer recipe</title><link href="https://sangeet2020.github.io/blog/2022/sb-recipe-sepformer/" rel="alternate" type="text/html" title="SpeechBrain SepFormer recipe"/><published>2022-12-19T17:40:16+01:00</published><updated>2022-12-19T17:40:16+01:00</updated><id>https://sangeet2020.github.io/blog/2022/sb-recipe-sepformer</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2022/sb-recipe-sepformer/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/SepFormer.drawio.svg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="tech-post"/><summary type="html"><![CDATA[SpeechBrain Speech Enhancement Tutorial with SepFormer Model]]></summary></entry><entry><title type="html">Installation without sudo</title><link href="https://sangeet2020.github.io/blog/2022/install_without_sudo/" rel="alternate" type="text/html" title="Installation without sudo"/><published>2022-11-12T17:40:16+01:00</published><updated>2022-11-12T17:40:16+01:00</updated><id>https://sangeet2020.github.io/blog/2022/install_without_sudo</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2022/install_without_sudo/"><![CDATA[<h2 id="installing-python-from-scratch-without-sudo">Installing Python from Scratch Without sudo</h2> <p>In this tutorial, we’ll guide you through the process of installing Python from scratch without using <code class="language-plaintext highlighter-rouge">sudo</code>. This approach allows you to have a self-contained Python installation in your user directory, giving you more control over your Python environment.</p> <ul> <li>Step 1: Download Python <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">VERSION</span><span class="o">=</span>3.10.12
  <span class="nv">USERNAME</span><span class="o">=</span>spongebob
  wget https://www.python.org/ftp/python/<span class="nv">$VERSION</span>/Python-<span class="nv">$VERSION</span>.tgz
  <span class="nb">tar</span> <span class="nt">-xf</span> Python-<span class="nv">$VERSION</span>.tgz
</code></pre></div> </div> </li> <li>Step 2: Configure and Install <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cd </span>Python-<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span>
  <span class="nb">mkdir</span> /home/<span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span>/.localpython/<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span>/
  ./configure <span class="nt">--prefix</span><span class="o">=</span>/home/<span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span>/.localpython/<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span>/ <span class="nt">--enable-optimizations</span>
  make <span class="nt">-j</span> 12
  make <span class="nt">-j</span> 12 <span class="nb">install</span>
</code></pre></div> </div> </li> <li>Step 3: Create Symbolic Links <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">ln</span> <span class="nt">-s</span> /home/<span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span>/.localpython/3.10.12/bin/python3.10 /home/<span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span>/.localpython/3.10.12/bin/python
  <span class="nb">ln</span> <span class="nt">-s</span> /home/<span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span>/.localpython/3.10.12/bin/pip3 /home/<span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span>/.localpython/3.10.12/bin/pip
</code></pre></div> </div> </li> <li>Step 4: Update PATH in bashrc Add the following line to your <code class="language-plaintext highlighter-rouge">~/.bashrc</code> or <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> file to ensure your new Python installation is in your PATH: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/home/</span><span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span><span class="s2">/.localpython/3.10.12/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> </ul> <h2 id="installing-python-using-miniconda">Installing Python using Miniconda</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## this installs the version 3.11.4</span>
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh <span class="nt">-b</span> <span class="nt">-p</span> miniconda

<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/mnt/users/sagarst/bin/miniconda/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/mnt/users/sagarst/bin/miniconda/lib:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div> <h2 id="create-the-virtual-environment">Create the Virtual Environment</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> venv sb_env
<span class="nb">source</span> /netscratch/sagar/thesis/sb_env/bin/activate
pip3 <span class="nb">install </span><span class="nv">torch</span><span class="o">==</span>1.11.0 torchvision torchaudio <span class="nt">--extra-index-url</span> https://download.pytorch.org/whl/cu113
</code></pre></div></div> <h2 id="installation-of-other-packages-without-sudo">Installation of other packages without sudo</h2> <ol> <li> <p>Let’s suppose you want to install <code class="language-plaintext highlighter-rouge">tree</code> package without sudo.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wget http://mama.indstate.edu/users/ice/tree/src/tree-2.0.2.tgz
 <span class="nb">tar</span> <span class="nt">-xzvf</span> tree-2.0.2.tgz
 ./configure <span class="nt">--prefix</span><span class="o">=</span>/home/sagar/.local/
 make <span class="nv">PREFIX</span><span class="o">=</span>/home/sagar/.local/ <span class="nv">MANDIR</span><span class="o">=</span>/home/sagar/.local/share/ <span class="nb">install</span> <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> <span class="nt">-v</span> 644 /home/sagar/.local/share/
</code></pre></div> </div> </li> <li> <p>Let’s suppose you want to install <code class="language-plaintext highlighter-rouge">sox</code> package without sudo. Here <code class="language-plaintext highlighter-rouge">/netscratch/sagar/usr/share/sox</code> is the destination dir.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wget https://nav.dl.sourceforge.net/project/sox/sox/14.4.2/sox-14.4.2.tar.bz2
 <span class="nb">tar</span> <span class="nt">-xf</span> sox-14.4.2.tar.bz2
 ./configure <span class="nt">--prefix</span><span class="o">=</span>/netscratch/sagar/usr/share/sox
 make <span class="nt">-s</span> <span class="o">&amp;&amp;</span> make <span class="nb">install</span>
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[Install linux/ubuntu packages without admin rights]]></summary></entry><entry><title type="html">SLURM Tutorial</title><link href="https://sangeet2020.github.io/blog/2022/slurm_tutorial/" rel="alternate" type="text/html" title="SLURM Tutorial"/><published>2022-11-12T17:40:16+01:00</published><updated>2022-11-12T17:40:16+01:00</updated><id>https://sangeet2020.github.io/blog/2022/slurm_tutorial</id><content type="html" xml:base="https://sangeet2020.github.io/blog/2022/slurm_tutorial/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>SLURM is an open-source cluster management and job scheduling system for Linux Clusters. Main function</p> <ul> <li>Allocates access to resources (computer nodes)</li> <li>Provides a framework to run and monitor jobs on allocated nodes</li> <li>Manage a job queue for competing resource requests.</li> </ul> <h2 id="overview-of-slurm-commands">Overview of SLURM commands</h2> <ul> <li><code class="language-plaintext highlighter-rouge">sinfo</code> : display compute partition and node information</li> <li><code class="language-plaintext highlighter-rouge">sbatch</code> : submit a job script for remote execution</li> <li><code class="language-plaintext highlighter-rouge">srun</code> : launch parallel tasks (job steps) for MPI jobs</li> <li><code class="language-plaintext highlighter-rouge">salloc</code> : allocate resources for an interactive job</li> <li><code class="language-plaintext highlighter-rouge">squeue</code> : display status for jobs and job steps</li> <li><code class="language-plaintext highlighter-rouge">sprio</code> : display job priority information</li> <li><code class="language-plaintext highlighter-rouge">scancel</code> : cancel pending or running jobs</li> <li><code class="language-plaintext highlighter-rouge">sstat</code> : display status information for running jobs</li> <li><code class="language-plaintext highlighter-rouge">sacct</code> : display accounting information for past jobs</li> <li><code class="language-plaintext highlighter-rouge">seff</code> : display job efficiency information for past jobs</li> <li><code class="language-plaintext highlighter-rouge">scontrol</code> : display or modify slurm configuration and state</li> </ul> <h2 id="codes-for-common-node-state">Codes for common node state</h2> <ul> <li><code class="language-plaintext highlighter-rouge">Draining</code> : the node is currently executing a job, but will not be allocated additional jobs</li> <li><code class="language-plaintext highlighter-rouge">Maint</code>: The node is currently in a reservation with a flag value of maintenance</li> <li><code class="language-plaintext highlighter-rouge">Mixed</code>: The node has some of its CPUs allocated with others are IDLE</li> <li><code class="language-plaintext highlighter-rouge">Reserved</code>: The node is in advanced and not generally available.</li> </ul> <p><code class="language-plaintext highlighter-rouge">myaccount</code> : to know your default project account</p> <h2 id="view-the-status-of-all-running-jobs">View the status of all running jobs</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>squeue -u sagar -o "%.6i %9P %15j %.6u %.10T %.10M %.10l %.6D %10R %s %.10g"
</code></pre></div></div> <h2 id="interactive-job">Interactive job</h2> <p>This basically helps you run your script interactively by allocating a terminal/console for you and you get to see all verbose generated by your script.</p> <h3 id="interactive-cpu--job">Interactive CPU job</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>srun --job-name "InteractiveJob" --cpus-per-task 8 --ptybash
</code></pre></div></div> <p>here</p> <ul> <li><code class="language-plaintext highlighter-rouge">InteractiveJob</code> : name of your job. (when you run <code class="language-plaintext highlighter-rouge">squeue -u sagar</code> you can identify your job with that name)</li> <li><code class="language-plaintext highlighter-rouge">--cpus-per-task 8</code> : you need 8 cores for this job (16 threads)</li> <li><code class="language-plaintext highlighter-rouge">--ptybash</code> : this will open a bash terminal for you and let YOU run the job (that’s why we call it an interactive job, since you can interact with the terminal, and control the arguments for your script)</li> </ul> <p>You can also specify other parameters like</p> <ul> <li><code class="language-plaintext highlighter-rouge">--mem-per-cpu=16gb</code> : each core to have 16 Gb RAM</li> <li><code class="language-plaintext highlighter-rouge">--time=30:00:00</code> : Run this task no longer than 30 hrs.</li> </ul> <h3 id="interactive-gpu-job">Interactive GPU job</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>srun \
-n 1 \
--container-mounts=/netscratch/$USER:/netscratch/$USER,/ds:/ds:ro,"`pwd`":"`pwd`",/home/$USER/:/home/$USER/ \
--container-image=/netscratch/sagar/docker_images/images/10.2.sqsh \
--container-workdir="`pwd`" \
--pty \
--cpus-per-gpu=8 \
--gpus-per-task=1 \
--partition=RTXA6000,A100,V100-32GB,RTX3090 \
/bin/bash
</code></pre></div></div> <p>change these parameters as per your requirement</p> <ul> <li><code class="language-plaintext highlighter-rouge">container-image</code></li> <li><code class="language-plaintext highlighter-rouge">cpus-per-gpu</code></li> <li><code class="language-plaintext highlighter-rouge">gpus-per-task</code></li> <li><code class="language-plaintext highlighter-rouge">partition</code></li> </ul> <h2 id="job-submission-gpu">Job submission (GPU)</h2> <h3 id="choice-1--short-way">Choice 1- short way</h3> <p>Create a script with a name, let’s say <code class="language-plaintext highlighter-rouge">sbatch_train.sh</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c">#SBATCH --nodes=1               # Number of nodes or servers. See: http://koeln.kl.dfki.de:3000/d/slurm-resources/resources?orgId=1&amp;refresh=15s</span>
<span class="c">#SBATCH --ntasks-per-node=1     # Number of task in each node, we want 1 </span>
<span class="c">#SBATCH --cpus-per-task=4       # We want 4 cores for this job.</span>
<span class="c">#SBATCH --mem-per-cpu=16gb      # each core to have 16 Gb RAM</span>
<span class="c">#SBATCH --gres=gpu:4            # We want 4 GPUs in each node for this job.</span>
<span class="c">#SBATCH --time=30:00:00         # Run this task no longer that 30 hrs.</span>
<span class="c">#SBATCH --partition=RTXA6000,V100-32GB,RTX3090  # Run this only in these mentioned GPUs. If you dont have any choice over GPUs, remove this parameter.</span>
<span class="c">#SBATCH --job-name=mimic_loss</span>
<span class="c">#SBATCH --output=mimic_loss_%A.logs</span>

srun <span class="nt">-K</span> <span class="se">\</span>
<span class="nt">--container-mounts</span><span class="o">=</span>/netscratch/<span class="nv">$USER</span>:/netscratch/<span class="nv">$USER</span>,/ds:/ds:ro,<span class="s2">"</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span><span class="s2">"</span>:<span class="s2">"</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span><span class="s2">"</span>,/home/<span class="nv">$USER</span>/:/home/<span class="nv">$USER</span>/ <span class="se">\</span>
<span class="nt">--container-image</span><span class="o">=</span>/netscratch/sagar/docker_images/images/10.2.sqsh <span class="se">\</span>
<span class="nt">--container-workdir</span><span class="o">=</span><span class="s2">"</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span><span class="s2">"</span> <span class="se">\</span>
python train.py <span class="nt">--output_dir</span> output
</code></pre></div></div> <p>where <code class="language-plaintext highlighter-rouge">--container-image</code> should point to your docker-image that has all packages installed like a python version of your choice, PyTorch or TensorFlow.<br/> <strong>Submit your job using</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sbatch sbatch_train.sh
</code></pre></div></div> <h3 id="choice-2--long-way">Choice 2- long way</h3> <p>I personally prefer using a docker image with minimal installation i.e. supported with just <code class="language-plaintext highlighter-rouge">cuda</code> and <code class="language-plaintext highlighter-rouge">cudnn</code> version of my choice. I rather use python, pytorch, tensorflow etc. (all required libraries/packages) installed locally in my conda virtual env or python virtual env. (You can also download the docker image of your choice: <code class="language-plaintext highlighter-rouge">https://hub.docker.com/r/nvidia/cuda/tags</code>)</p> <ol> <li>Create a script with a name, let’s say <code class="language-plaintext highlighter-rouge">sbatch_train.sh</code></li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c">#SBATCH --nodes=1               # Number of nodes or servers. See: http://koeln.kl.dfki.de:3000/d/slurm-resources/resources?orgId=1&amp;refresh=15s</span>
<span class="c">#SBATCH --ntasks-per-node=1     # Number of task in each node, we want 1 </span>
<span class="c">#SBATCH --cpus-per-task=4       # We want 4 cores for this job.</span>
<span class="c">#SBATCH --mem-per-cpu=16gb      # each core to have 16 Gb RAM</span>
<span class="c">#SBATCH --gres=gpu:4            # We want 4 GPUs in each node for this job.</span>
<span class="c">#SBATCH --time=30:00:00         # Run this task no longer than 30 hrs.</span>
<span class="c">#SBATCH --partition=RTXA6000,V100-32GB,RTX3090  # Run this only in these mentioned GPUs. If you don't have any choice over GPUs, remove this parameter.</span>
<span class="c">#SBATCH --job-name=mimic_loss</span>
<span class="c">#SBATCH --output=mimic_loss_%A.logs</span>

<span class="nb">echo</span> <span class="s2">"#############################"</span>
<span class="nb">date
echo</span> <span class="s2">"Current dir: "</span> <span class="k">${</span><span class="nv">SLURM_SUBMIT_DIR</span><span class="k">}</span>
<span class="nb">echo</span> <span class="s2">"Hostname: </span><span class="sb">`</span><span class="nb">hostname</span><span class="sb">`</span><span class="s2">"</span>

<span class="c"># Print the task details.</span>
<span class="nb">echo</span> <span class="s2">"Job ID: </span><span class="k">${</span><span class="nv">SLURM_JOBID</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"SLURM array task ID:  </span><span class="k">${</span><span class="nv">SLURM_ARRAY_TASK_ID</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Node list: </span><span class="k">${</span><span class="nv">SLURM_JOB_NODELIST</span><span class="k">}</span><span class="s2">"</span> 
<span class="nb">echo</span> <span class="s2">"Cluster name: </span><span class="k">${</span><span class="nv">SLURM_CLUSTER_NAME</span><span class="k">}</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Partition name: </span><span class="k">${</span><span class="nv">SLURM_JOB_PARTITION</span><span class="k">}</span><span class="s2">"</span> 
<span class="nb">echo</span> <span class="s2">"Using: </span><span class="sb">`</span>which python<span class="sb">`</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"#############################</span><span class="se">\n</span><span class="s2">"</span>

srun <span class="nt">-K</span> <span class="se">\</span>
<span class="nt">--container-mounts</span><span class="o">=</span>/netscratch/<span class="nv">$USER</span>:/netscratch/<span class="nv">$USER</span>,/ds:/ds:ro,<span class="s2">"</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span><span class="s2">"</span>:<span class="s2">"</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span><span class="s2">"</span>,/home/<span class="nv">$USER</span>/:/home/<span class="nv">$USER</span>/ <span class="se">\</span>
<span class="nt">--container-image</span><span class="o">=</span>/netscratch/sagar/docker_images/images/10.2.sqsh <span class="se">\</span>
<span class="nt">--container-workdir</span><span class="o">=</span><span class="s2">"</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span><span class="s2">"</span> <span class="se">\</span>
bash run_task.sh
</code></pre></div></div> <p>In my script, I use a basic docker image with minimal installation of just cuda and cudnn (a version of my choice). And to use the locally installed libraries and packages, I activate the virtual environment. All these are done in <code class="language-plaintext highlighter-rouge">run_task.sh</code> script</p> <ol> <li>Your <code class="language-plaintext highlighter-rouge">run_task.sh</code> script will have the actual training script/commands</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># We jump into the submission dir</span>
<span class="nb">cd</span> <span class="k">${</span><span class="nv">SLURM_SUBMIT_DIR</span><span class="k">}</span>

<span class="c"># Activate the python virtual env</span>
<span class="nb">source</span> /netscratch/sagar/thesis/sb_env/bin/activate

<span class="c"># But if you are using conda (uncomment the lines below)</span>
<span class="c"># . /netscratch/sagar/miniconda/etc/profile.d/conda.sh</span>
<span class="c"># conda activate my_env_name</span>

<span class="c"># If you need other packages that are not available in pip/conda, </span>
<span class="c"># you can install them this way</span>
apt-get update
apt-get <span class="nt">-y</span> <span class="nb">install </span>libsndfile1


<span class="c">## Single-GPU training</span>
<span class="c"># Execute this python script (this will use 1 GPU regardless you have taken 4 or 8 GPUs)</span>
python train.py hparams/robust_asr.yaml

<span class="c">## Multi GPU training</span>
<span class="c"># If you want your script to use all GPUs that you requested, follow this </span>
<span class="nv">NUM_GPUS</span><span class="o">=</span>4
python <span class="nt">-m</span> torch.distributed.launch <span class="se">\</span>
<span class="nt">--nproc_per_node</span><span class="o">=</span><span class="k">${</span><span class="nv">NUM_GPUS</span><span class="k">}</span> <span class="se">\</span>
<span class="nt">--nnodes</span><span class="o">=</span><span class="k">${</span><span class="nv">SLURM_JOB_NUM_NODES</span><span class="k">}</span> <span class="se">\</span>
<span class="nt">--node_rank</span><span class="o">=</span><span class="k">${</span><span class="nv">SLURM_NODEID</span><span class="k">}</span> <span class="se">\</span>
train.py hparams/robust_asr.yaml <span class="se">\</span>
<span class="nt">--distributed_launch</span>

<span class="c">## Note</span>
<span class="c"># Multi-gpu jobs will be successful only if your script is adapted to perform DP or DDP training</span>
</code></pre></div></div> <p><strong>Submit your job using</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sbatch sbatch_train.sh
</code></pre></div></div> <h2 id="multi-node-multi-gpu-ddp-training">Multi-node multi-GPU DDP training</h2> <p>To utilize multiple nodes and all GPUs within those nodes, it is important to ensure that all nodes are connected to a master node. This will allow for efficient distribution of work across all available resources. This can be done using</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">MASTER</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$SLURM_JOB_NODELIST</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s2">","</span> <span class="nt">-f1</span> | <span class="nb">sed</span> <span class="s1">'s/[][]//g'</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">"-"</span> <span class="nt">-f</span> 1,2<span class="sb">`</span>
</code></pre></div></div> <p>and then in the job submission script modify parameters this way</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> torch.distributed.launch 
<span class="nt">--nproc_per_node</span><span class="o">=</span><span class="k">${</span><span class="nv">NUM_GPUS</span><span class="k">}</span> 
<span class="nt">--nnodes</span><span class="o">=</span><span class="k">${</span><span class="nv">SLURM_JOB_NUM_NODES</span><span class="k">}</span> 
<span class="nt">--master_addr</span><span class="o">=</span><span class="k">${</span><span class="nv">MASTER</span><span class="k">}</span> 
<span class="nt">--master_port</span><span class="o">=</span>5557 
<span class="nt">--node_rank</span><span class="o">=</span><span class="k">${</span><span class="nv">SLURM_NODEID</span><span class="k">}</span> 
<span class="k">${</span><span class="nv">training_command</span><span class="k">}</span> 
<span class="nt">--distributed_launch</span>
</code></pre></div></div> <h2 id="downloading-a-docker-image">Downloading a docker image</h2> <p>Prepare a script with name <code class="language-plaintext highlighter-rouge">download_docker_img.sh</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">docker_img</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">docker_img_name</span><span class="o">=</span><span class="nv">$2</span>
srun enroot import <span class="nt">-o</span> /netscratch/<span class="nv">$USER</span>/docker_images/<span class="nv">$docker_img_name</span> docker://<span class="nv">$docker_img</span>
</code></pre></div></div> <p>Download docker image and prepare the sqsh file, E.g.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./download_docker_img.sh nvidia/pytorch:20.10-py3 pytorch:20.10-py3.sqsh
</code></pre></div></div>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[SLURM Commands- An Overview of Job Scheduling and Cluster Management System]]></summary></entry></feed>